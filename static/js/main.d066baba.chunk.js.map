{"version":3,"sources":["components/Block.jsx","utils/point.js","utils/tetromino.js","utils/randomizer.js","utils/board.js","components/Matrix.jsx","components/MainBoard.jsx","components/Preview.jsx","components/ScoreBoard.jsx","hooks/useKeyHandler.js","reducer.js","components/App.jsx","index.js","hooks/useInterval.js"],"names":["Block","_ref","color","styling","React","useMemo","backgroundColor","getStyling","react_default","a","createElement","style","create","x","y","ShapeType","L","I","T","S","Z","O","J","ShapeOrientation","Up","Right","Down","Left","type","orientation","getShape","tetromino","shapes","_shapes","Object","defineProperty","_ShapeType$L","_ShapeType$I","_ShapeType$T","_ShapeType$S","_ShapeType$Z","_ShapeType$O","_ShapeType$J","shuffle","keys","next","randomizer","_randomizer","toArray","head","tail","slice","length","height","width","fill","Array","commitTetrominoToBoard","board","position","value","columns","shape","Tetromino","mappedBoard","r","c","getBoardIndexFromPosition","Point","moveLeft","potentialPosition","isValid","moveRight","rotate","potentialTetromino","objectSpread","n","maxColIndex","maxRowIndex","Matrix","current","styles","borderBottom","display","gridTemplateColumns","concat","getStyles","boardWithTetromino","Board","map","i","colors","key","0","1","2","MainBoard","Preview","ScoreBoard","level","score","useKeyHandler","handler","useEffect","handleKeyDown","event","document","addEventListener","removeEventListener","Randomizer","firstShape","secondShape","ActionTypes","MoveDown","MoveLeft","MoveRight","Reset","Rotate","Start","Stop","Tick","initialState","interval","state","reducer","action","_Board$moveDown","nextBoard","_Randomizer$next","_Randomizer$next2","slicedToArray","nextShape","nextRandomizer","_Board$moveDown2","container","ReactDOM","render","_React$useReducer","useReducer","_React$useReducer2","dispatch","delay","callback","savedCallback","useRef","id","setInterval","clearInterval","useInterval","getElementById"],"mappings":"4MAEe,SAASA,EAATC,GAA0B,IAATC,EAASD,EAATC,MACxBC,EAAUC,IAAMC,QAAQ,kBAKhC,SAAoBH,GAClB,MAAO,CACLI,gBAAiBJ,GAPiBK,CAAWL,IAAQ,CAACA,IAExD,OAAOM,EAAAC,EAAAC,cAAA,OAAKC,MAAOR,eCLd,SAASS,EAAOC,EAAGC,GACxB,MAAO,CAAED,IAAGC,+CCDDC,EAAY,CACvBC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KAGQC,EAAmB,CAC9BC,GAAI,EACJC,MAAO,EACPC,KAAM,EACNC,KAAM,GAID,SAASf,EAAOgB,GACrB,MAAO,CACLA,OACAC,YAAaN,EAAiBC,IAK3B,SAASM,EAASC,GACvB,OAAOC,EAAOD,EAAUH,MAAMG,EAAUF,aAe1C,IAAMG,GAAMC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EACTlB,EAAUC,GADDoB,EAAA,GAAAF,OAAAC,EAAA,EAAAD,CAAAE,EAEPb,EAAiBC,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KALDU,OAAAC,EAAA,EAAAD,CAAAE,EAOPb,EAAiBE,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAVDS,OAAAC,EAAA,EAAAD,CAAAE,EAYPb,EAAiBG,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAfDQ,OAAAC,EAAA,EAAAD,CAAAE,EAiBPb,EAAiBI,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApBDS,IAAAF,OAAAC,EAAA,EAAAD,CAAAD,EAwBTlB,EAAUE,GAxBDoB,EAAA,GAAAH,OAAAC,EAAA,EAAAD,CAAAG,EAyBPd,EAAiBC,GAAK,CACrB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KA7BJU,OAAAC,EAAA,EAAAD,CAAAG,EA+BPd,EAAiBE,MAAQ,CACxB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAnCJS,OAAAC,EAAA,EAAAD,CAAAG,EAqCPd,EAAiBG,KAAO,CACvB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAzCJQ,OAAAC,EAAA,EAAAD,CAAAG,EA2CPd,EAAiBI,KAAO,CACvB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KA/CJU,IAAAH,OAAAC,EAAA,EAAAD,CAAAD,EAmDTlB,EAAUG,GAnDDoB,EAAA,GAAAJ,OAAAC,EAAA,EAAAD,CAAAI,EAoDPf,EAAiBC,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAvDDU,OAAAC,EAAA,EAAAD,CAAAI,EAyDPf,EAAiBE,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA5DDS,OAAAC,EAAA,EAAAD,CAAAI,EA8DPf,EAAiBG,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAjEDQ,OAAAC,EAAA,EAAAD,CAAAI,EAmEPf,EAAiBI,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAtEDW,IAAAJ,OAAAC,EAAA,EAAAD,CAAAD,EA0ETlB,EAAUI,GA1EDoB,EAAA,GAAAL,OAAAC,EAAA,EAAAD,CAAAK,EA2EPhB,EAAiBC,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA9EDU,OAAAC,EAAA,EAAAD,CAAAK,EAgFPhB,EAAiBE,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAnFDS,OAAAC,EAAA,EAAAD,CAAAK,EAqFPhB,EAAiBG,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAxFDQ,OAAAC,EAAA,EAAAD,CAAAK,EA0FPhB,EAAiBI,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA7FDY,IAAAL,OAAAC,EAAA,EAAAD,CAAAD,EAiGTlB,EAAUK,GAjGDoB,EAAA,GAAAN,OAAAC,EAAA,EAAAD,CAAAM,EAkGPjB,EAAiBC,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KArGDU,OAAAC,EAAA,EAAAD,CAAAM,EAuGPjB,EAAiBE,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA1GDS,OAAAC,EAAA,EAAAD,CAAAM,EA4GPjB,EAAiBG,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA/GDQ,OAAAC,EAAA,EAAAD,CAAAM,EAiHPjB,EAAiBI,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApHDa,IAAAN,OAAAC,EAAA,EAAAD,CAAAD,EAwHTlB,EAAUM,GAxHDoB,EAAA,GAAAP,OAAAC,EAAA,EAAAD,CAAAO,EAyHPlB,EAAiBC,GAAK,CACrB,CAAC,EAAG,GACJ,CAAC,EAAG,KA3HEU,OAAAC,EAAA,EAAAD,CAAAO,EA6HPlB,EAAiBE,MAAQ,CACxB,CAAC,EAAG,GACJ,CAAC,EAAG,KA/HES,OAAAC,EAAA,EAAAD,CAAAO,EAiIPlB,EAAiBG,KAAO,CACvB,CAAC,EAAG,GACJ,CAAC,EAAG,KAnIEQ,OAAAC,EAAA,EAAAD,CAAAO,EAqIPlB,EAAiBI,KAAO,CACvB,CAAC,EAAG,GACJ,CAAC,EAAG,KAvIEc,IAAAP,OAAAC,EAAA,EAAAD,CAAAD,EA2ITlB,EAAUO,GA3IDoB,EAAA,GAAAR,OAAAC,EAAA,EAAAD,CAAAQ,EA4IPnB,EAAiBC,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA/IDU,OAAAC,EAAA,EAAAD,CAAAQ,EAiJPnB,EAAiBE,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApJDS,OAAAC,EAAA,EAAAD,CAAAQ,EAsJPnB,EAAiBG,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAzJDQ,OAAAC,EAAA,EAAAD,CAAAQ,EA2JPnB,EAAiBI,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA9JDe,IAAAT,GCrCL,SAASrB,IACd,OAAO+B,kBAAQT,OAAOU,KAAK7B,IAStB,SAAS8B,EAAKC,GAAY,IAAAC,EAAAb,OAAAc,EAAA,EAAAd,CACPY,GAAjBG,EADwBF,EAAA,GACfG,EADeH,EAAAI,MAAA,GAG/B,OAAID,EAAKE,OAAS,EACT,CAACH,EAAMC,GAGT,CAACD,EAAMrC,KCfT,SAASA,EAAOyC,EAAQC,GAC7B,OAAOC,eAAK,IAAIC,MAAMH,EAASC,GAAQ,EAAG,GAGrC,SAASG,EAAuBC,EAAO3B,EAAW4B,EAAUC,EAAOC,GAIxE,IAHA,IAAMC,EAAQC,EAAmBhC,GAC3BiC,EAAcN,EAAMP,QAEjBc,EAAI,EAAGA,EAAIH,EAAMV,OAAQa,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMG,GAAGb,OAAQc,IAAK,CAExC,GAAoB,IAAhBJ,EAAMG,GAAGC,GAGbF,EADcG,EAA0BC,EAAaT,EAAS9C,EAAIqD,EAAGP,EAAS7C,EAAImD,GAAIJ,IACjED,EAIzB,OAAOI,EAmBF,SAASK,EAASX,EAAO3B,EAAW4B,EAAUE,GACnD,IAAMS,EAAoBF,EAAaT,EAAS9C,EAAI,EAAG8C,EAAS7C,GAEhE,OAAIyD,EAAQb,EAAO3B,EAAWuC,EAAmBT,GACxCS,EAGFX,EAIF,SAASa,EAAUd,EAAO3B,EAAW4B,EAAUE,GACpD,IAAMS,EAAoBF,EAAaT,EAAS9C,EAAI,EAAG8C,EAAS7C,GAEhE,OAAIyD,EAAQb,EAAO3B,EAAWuC,EAAmBT,GACxCS,EAGFX,EAIF,SAASc,EAAOf,EAAO3B,EAAW4B,EAAUE,GACjD,IAAMa,EFpCD,SAAgB3C,GACrB,OAAOG,OAAAyC,EAAA,EAAAzC,CAAA,GACFH,EADL,CAEEF,aAIqB+C,EAJQ7C,EAAUF,aAKjC+C,EAAI,GAAK,KADnB,IAAyBA,EE6BIb,CAAiBhC,GAE5C,OAAIwC,EAAQb,EAAOgB,EAAoBf,EAAUE,GACxCa,EAGF3C,EAKT,SAASwC,EAAQb,EAAO3B,EAAW4B,EAAUE,GAK3C,IAJA,IAAMC,EAAQC,EAAmBhC,GAC3B8C,EAAchB,EAAU,EACxBiB,EAAepB,EAAMN,OAASS,EAAW,EAEtCI,EAAI,EAAGA,EAAIH,EAAMV,OAAQa,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAMG,GAAGb,OAAQc,IAEnC,GAAoB,IAAhBJ,EAAMG,GAAGC,GAAb,CAGA,GAAIP,EAAS9C,EAAIqD,EAAI,GAAKP,EAAS9C,EAAIqD,EAAIW,EAAe,OAAO,EAGjE,GAAIlB,EAAS7C,EAAImD,EAAI,GAAKN,EAAS7C,EAAImD,EAAIa,EAAe,OAAO,EAIjE,GAAqB,IAAjBpB,EADUS,EAA0BC,EAAaT,EAAS9C,EAAIqD,EAAGP,EAAS7C,EAAImD,GAAIJ,IAC5D,OAAO,EAIrC,OAAO,EAGT,SAASM,EAA0BR,EAAUE,GAC3C,OAAOF,EAAS9C,EAAK8C,EAAS7C,EAAI+C,ECpGrB,SAASkB,EAAT9E,GAAsE,IAApDyD,EAAoDzD,EAApDyD,MAAOG,EAA6C5D,EAA7C4D,QAASmB,EAAoC/E,EAApC+E,QAAS3B,EAA2BpD,EAA3BoD,OAAQM,EAAmB1D,EAAnB0D,SAAUL,EAASrD,EAATqD,MACpE2B,EAAS7E,IAAMC,QAAQ,kBAY/B,SAAmBwD,EAASR,EAAQC,GAClC,MAAO,CACL4B,aAAc,iBACdC,QAAS,OACTC,oBAAmB,UAAAC,OAAYxB,EAAZ,UACnBR,OAAQA,EACRC,MAAOA,GAlB0BgC,CAAUzB,EAASR,EAAQC,IAAQ,CAACO,EAASR,EAAQC,IAClFiC,EAAqBC,EAA6B9B,EAAOsB,EAASrB,EAAU,EAAGE,GAErF,OACErD,EAAAC,EAAAC,cAAA,OAAKC,MAAOsE,GACTM,EAAmBE,IAAI,SAAClC,EAAMmC,GAC7B,OAAOlF,EAAAC,EAAAC,cAACV,EAAD,CAAOE,MAAOyF,EAAOpC,GAAOqC,IAAG,GAAAP,OAAKK,EAAL,KAAAL,OAAU9B,QAgBxD,IAAMoC,EAAS,CACbE,EAAG,QACHC,EAAG,aACHC,EAAG,aC3BU,SAASC,EAAT/F,GAAiD,IAA5ByD,EAA4BzD,EAA5ByD,MAAOsB,EAAqB/E,EAArB+E,QAASrB,EAAY1D,EAAZ0D,SAClD,OACEnD,EAAAC,EAAAC,cAACqE,EAAD,CACErB,MAAOA,EACPG,QAAS,GACTmB,QAASA,EACT3B,OAAQ,IACRM,SAAUA,EACVL,MAAO,MCNb,IAAMI,EAAQ8B,EAAa,EAAG,GACxB7B,EAAWS,EAAa,EAAG,GAElB,SAAS6B,EAAThG,GAA2B,IAAR4C,EAAQ5C,EAAR4C,KAChC,OACErC,EAAAC,EAAAC,cAACqE,EAAD,CACErB,MAAOA,EACPG,QAAS,EACTmB,QAASnC,EACTQ,OAAQ,IACRM,SAAUA,EACVL,MAAO,MCbE,SAAS4C,EAATjG,GAA4C,IAAtBkG,EAAsBlG,EAAtBkG,MAAOtD,EAAe5C,EAAf4C,KAAMuD,EAASnG,EAATmG,MAChD,OACE5F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuF,EAAD,CAASpD,KAAMA,IACfrC,EAAAC,EAAAC,cAAA,qBAAayF,GACb3F,EAAAC,EAAAC,cAAA,qBAAa0F,ICNJ,SAASC,EAAcT,EAAKU,GACzClG,IAAMmG,UAAU,WACd,SAASC,EAAcC,GACjBA,EAAMb,MAAQA,GAChBU,EAAQG,GAMZ,OAFAC,SAASC,iBAAiB,UAAWH,GAE9B,kBAAME,SAASE,oBAAoB,UAAWJ,KACpD,CAACZ,UCRgCiB,EAAgBA,wBAA/CC,SAC2BD,2BAA3BE,OAAajE,OASPkE,EAAc,CACzBC,SAAU,OACVC,SAAU,OACVC,UAAW,QACXC,MAAO,QACPC,OAAQ,SACRC,MAAO,QACPC,KAAM,OACNC,KAAM,QAGKC,EAAe,CAC1B/D,MAAO8B,EAAa,GAAI,IACxBR,QAASjB,EAAiB+C,GAC1BY,SAAU,IACVvB,MAAO,EACPtD,KAAMkB,EAAiBgD,GACvBpD,SAAUS,EAAa,EAAG,GAC1BtB,WAAYA,EACZsD,MAAO,EACPuB,MA1BQ,GA6BK,SAASC,EAAQD,EAAOE,GACrC,OAAQA,GACN,KAAKb,EAAYQ,KACjB,KAAKR,EAAYC,SAAU,IAAAa,ENbxB,SAAkBpE,EAAOsB,EAASnC,EAAMc,EAAUb,EAAYe,GACnE,IAAMS,EAAoBF,EAAaT,EAAS9C,EAAG8C,EAAS7C,EAAI,GAEhE,GAAIyD,EAAQb,EAAOsB,EAASV,EAAmBT,GAC7C,MAAO,CAACH,EAAOsB,EAASnC,EAAMyB,EAAmBxB,GAGnD,IAAMiF,EAAYtE,EAAuBC,EAAOsB,EAASrB,EAAU,EAAGE,GAPMmE,EAQxCnB,EAAgB/D,GARwBmF,EAAA/F,OAAAgG,EAAA,EAAAhG,CAAA8F,EAAA,GAQrEG,EARqEF,EAAA,GAQ1DG,EAR0DH,EAAA,GAY5E,MAAO,CAACF,EAAWlF,EAHFkB,EAAiBoE,GACb/D,EAAa,EAAG,GAEYgE,GMEQ5C,CACnDmC,EAAMjE,MACNiE,EAAM3C,QACN2C,EAAM9E,KACN8E,EAAMhE,SACNgE,EAAM7E,WACN,IAPuBuF,EAAAnG,OAAAgG,EAAA,EAAAhG,CAAA4F,EAAA,GAClBpE,EADkB2E,EAAA,GACXrD,EADWqD,EAAA,GACFxF,EADEwF,EAAA,GACI1E,EADJ0E,EAAA,GACcvF,EADduF,EAAA,GAUzB,OAAOnG,OAAAyC,EAAA,EAAAzC,CAAA,GACFyF,EADL,CAEEjE,QACAsB,UACAnC,OACAc,WACAb,eAGJ,KAAKkE,EAAYE,SACf,OAAOhF,OAAAyC,EAAA,EAAAzC,CAAA,GACFyF,EADL,CAEEhE,SAAU6B,EAAemC,EAAMjE,MAAOiE,EAAM3C,QAAS2C,EAAMhE,SAAU,MAEzE,KAAKqD,EAAYG,UACf,OAAOjF,OAAAyC,EAAA,EAAAzC,CAAA,GACFyF,EADL,CAEEhE,SAAU6B,EAAgBmC,EAAMjE,MAAOiE,EAAM3C,QAAS2C,EAAMhE,SAAU,MAE1E,KAAKqD,EAAYK,OACf,OAAOnF,OAAAyC,EAAA,EAAAzC,CAAA,GACFyF,EADL,CAEE3C,QAASQ,EAAamC,EAAMjE,MAAOiE,EAAM3C,QAAS2C,EAAMhE,SAAU,MAEtE,QACE,OAAOgE,GCnDb,IAAM1C,GAAS,CACbqD,UAAW,CACTnD,QAAS,SCtBboD,IAASC,OAAOpI,IAAMM,cDEP,WAAe,IAAA+H,EACFrI,IAAMsI,WAAWd,EAASH,GADxBkB,EAAAzG,OAAAgG,EAAA,EAAAhG,CAAAuG,EAAA,GACrBd,EADqBgB,EAAA,GACdC,EADcD,EAAA,GAU5B,OAPAtC,EAAc,UAAW,kBAAMuC,EAAS5B,EAAYK,UACpDhB,EAAc,YAAa,kBAAMuC,EAAS5B,EAAYC,YACtDZ,EAAc,YAAa,kBAAMuC,EAAS5B,EAAYE,YACtDb,EAAc,aAAc,kBAAMuC,EAAS5B,EAAYG,aEX1C,SAAqB0B,EAAOC,GACzC,IAAMC,EAAgB3I,IAAM4I,SAE5B5I,IAAMmG,UAAU,WACdwC,EAAc/D,QAAU8D,GACvB,CAACA,IAEJ1I,IAAMmG,UAAU,WAId,GAAa,MAATsC,EAAe,CACjB,IAAII,EAAKC,YAJX,WACEH,EAAc/D,WAGa6D,GAC3B,OAAO,kBAAMM,cAAcF,MAE5B,CAACJ,IFFJO,CAAYzB,EAAMD,SAAU,kBAAMkB,EAAS5B,EAAYQ,QAGrDhH,EAAAC,EAAAC,cAAA,OAAKC,MAAOsE,GAAOqD,WACjB9H,EAAAC,EAAAC,cAACsF,EAAD,CAAWtC,MAAOiE,EAAMjE,MAAOsB,QAAS2C,EAAM3C,QAASrB,SAAUgE,EAAMhE,WACvEnD,EAAAC,EAAAC,cAACwF,EAAD,CAAYC,MAAOwB,EAAMxB,MAAOtD,KAAM8E,EAAM9E,KAAMuD,MAAOuB,EAAMvB,WCf3BM,SAAS2C,eAAe","file":"static/js/main.d066baba.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Block({ color }) {\n  const styling = React.useMemo(() => getStyling(color), [color]);\n\n  return <div style={styling} />;\n}\n\nfunction getStyling(color) {\n  return {\n    backgroundColor: color,\n  };\n}\n","export function create(x, y) {\n  return { x, y };\n}\n\nexport function equals(a, b) {\n  return a.x === b.x && a.y === b.y;\n}\n","export const ShapeType = {\n  L: 'L',\n  I: 'I',\n  T: 'T',\n  S: 'S',\n  Z: 'Z',\n  O: 'O',\n  J: 'J',\n}\n\nexport const ShapeOrientation = {\n  Up: 0,\n  Right: 1,\n  Down: 2,\n  Left: 3,\n}\n\n// Create a new Tetromino.\nexport function create(type) {\n  return {\n    type,\n    orientation: ShapeOrientation.Up,\n  };\n}\n\n// Get the current blocks for a piece and orientation.\nexport function getShape(tetromino) {\n  return shapes[tetromino.type][tetromino.orientation];\n}\n\n// Rotate a Tetromino clockwise.\nexport function rotate(tetromino) {\n  return {\n    ...tetromino,\n    orientation: nextOrientation(tetromino.orientation),\n  };\n}\n\nfunction nextOrientation(n) {\n  return (n + 1) % 4;\n}\n\nconst shapes = {\n  [ShapeType.L]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.I]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  },\n\n  [ShapeType.T]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.S]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.Z]: {\n    [ShapeOrientation.Up]: [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  },\n\n  [ShapeType.O]: {\n    [ShapeOrientation.Up]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Right]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1],\n      [1, 1],\n    ],\n  },\n\n  [ShapeType.J]: {\n    [ShapeOrientation.Up]: [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  },\n};\n","import { shuffle } from 'lodash';\nimport { ShapeType } from './tetromino';\n\n// Create a new randomizer object, which s passed in to the other methods in this module to get\n// random numbers. See http://tetris.wikia.com/wiki/Random_Generator.\nexport function create() {\n  return shuffle(Object.keys(ShapeType));\n}\n\n// Retrieve the next number. Returns an array with value and the next randomizer.\n//\n// Example:\n//\n//   [val, randomizer] = next(randomizer);\n//\nexport function next(randomizer) {\n  const [head, ...tail] = randomizer;\n\n  if (tail.length > 0) {\n    return [head, tail];\n  }\n\n  return [head, create()];\n}\n","import { fill } from 'lodash';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\n\n// Create a new \"board\". Represented as a flat array of length 200, which is 10 columns wide by 20\n// rows tall.\nexport function create(height, width) {\n  return fill(new Array(height * width), 0, 0);\n}\n\nexport function commitTetrominoToBoard(board, tetromino, position, value, columns) {\n  const shape = Tetromino.getShape(tetromino);\n  const mappedBoard = board.slice();\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      const index = getBoardIndexFromPosition(Point.create(position.x + c, position.y + r), columns);\n      mappedBoard[index] = value;\n    }\n  }\n\n  return mappedBoard;\n}\n\nexport function moveDown(board, current, next, position, randomizer, columns) {\n  const potentialPosition = Point.create(position.x, position.y + 1);\n\n  if (isValid(board, current, potentialPosition, columns)) {\n    return [board, current, next, potentialPosition, randomizer];\n  }\n\n  const nextBoard = commitTetrominoToBoard(board, current, position, 1, columns);\n  const [nextShape, nextRandomizer] = Randomizer.next(randomizer);\n  const nextNext = Tetromino.create(nextShape);\n  const nextPosition = Point.create(3, 0);\n\n  return [nextBoard, next, nextNext, nextPosition, nextRandomizer];\n}\n\n// Move a tetromino left, if possible. Either way, return a position.\nexport function moveLeft(board, tetromino, position, columns) {\n  const potentialPosition = Point.create(position.x - 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition, columns)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n// Move a tetromino right, if possible. Either way, return a position.\nexport function moveRight(board, tetromino, position, columns) {\n  const potentialPosition = Point.create(position.x + 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition, columns)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n// Rotate a tetromino, if possible. Either way, return a tetromino.\nexport function rotate(board, tetromino, position, columns) {\n  const potentialTetromino = Tetromino.rotate(tetromino);\n\n  if (isValid(board, potentialTetromino, position, columns)) {\n    return potentialTetromino;\n  }\n\n  return tetromino;\n}\n\n// Determine if a tetromino at a certain position on the board is \"valid\". In other words, doesn't\n// overlap with any existing filled spots and is completely on the board.\nfunction isValid(board, tetromino, position, columns) {\n  const shape = Tetromino.getShape(tetromino);\n  const maxColIndex = columns - 1;\n  const maxRowIndex = (board.length / columns) - 1;\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      // If the horizontal position is off the board, it's not valid.\n      if (position.x + c < 0 || position.x + c > maxColIndex) { return false; }\n\n      // If the vertical position is off the board, it's not valid.\n      if (position.y + r < 0 || position.y + r > maxRowIndex) { return false }\n\n      // If this part of the shape is over a part of the board that's \"on\", it's not valid.\n      const index = getBoardIndexFromPosition(Point.create(position.x + c, position.y + r), columns);\n      if (board[index] === 1) { return false; }\n    }\n  }\n\n  return true;\n}\n\nfunction getBoardIndexFromPosition(position, columns) {\n  return position.x + (position.y * columns);\n}\n","import React from 'react';\nimport Block from './Block';\nimport * as Board from '../utils/board';\n\nexport default function Matrix({ board, columns, current, height, position, width }) {\n  const styles = React.useMemo(() => getStyles(columns, height, width), [columns, height, width]);\n  const boardWithTetromino = Board.commitTetrominoToBoard(board, current, position, 2, columns);\n\n  return (\n    <div style={styles}>\n      {boardWithTetromino.map((fill, i) => {\n        return <Block color={colors[fill]} key={`${i}-${fill}`} />\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns, height, width) {\n  return {\n    borderBottom: '1px solid grey',\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: height,\n    width: width,\n  };\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'limegreen',\n};\n","import React from 'react';\nimport Matrix from './Matrix';\n\nexport default function MainBoard({ board, current, position }) {\n  return (\n    <Matrix\n      board={board}\n      columns={10}\n      current={current}\n      height={400}\n      position={position}\n      width={200}\n    />\n  );\n}\n","import React from 'react';\nimport Matrix from './Matrix';\nimport * as Board from '../utils/board';\nimport * as Point from '../utils/point';\n\nconst board = Board.create(5, 5);\nconst position = Point.create(1, 1);\n\nexport default function Preview({ next }) {\n  return (\n    <Matrix\n      board={board}\n      columns={5}\n      current={next}\n      height={100}\n      position={position}\n      width={100}\n    />\n  );\n}\n","import React from 'react';\nimport Preview from './Preview';\n\nexport default function ScoreBoard({ level, next, score }) {\n  return (\n    <div>\n      <Preview next={next} />\n      <div>Level: {level}</div>\n      <div>Score: {score}</div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function useKeyHandler(key, handler) {\n  React.useEffect(() => {\n    function handleKeyDown(event) {\n      if (event.key === key) {\n        handler(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [key]);\n}\n","import * as Board from './utils/board';\nimport * as Point from './utils/point';\nimport * as Randomizer from './utils/randomizer';\nimport * as Tetromino from './utils/tetromino';\n\nconst [firstShape, firstRandomizer] = Randomizer.next(Randomizer.create());\nconst [secondShape, randomizer] = Randomizer.next(firstRandomizer);\n\nexport const StateTypes = {\n  Paused: 0,\n  Playing: 1,\n  Won: 2,\n  Lost: 3,\n};\n\nexport const ActionTypes = {\n  MoveDown: 'down',\n  MoveLeft: 'left',\n  MoveRight: 'right',\n  Reset: 'reset',\n  Rotate: 'rotate',\n  Start: 'start',\n  Stop: 'stop',\n  Tick: 'tick',\n};\n\nexport const initialState = {\n  board: Board.create(20, 10),\n  current: Tetromino.create(firstShape),\n  interval: 750,\n  level: 1,\n  next: Tetromino.create(secondShape),\n  position: Point.create(3, 0),\n  randomizer: randomizer,\n  score: 0,\n  state: StateTypes.Paused,\n}\n\nexport default function reducer(state, action) {\n  switch (action) {\n    case ActionTypes.Tick:\n    case ActionTypes.MoveDown: {\n      const [board, current, next, position, randomizer] = Board.moveDown(\n        state.board,\n        state.current,\n        state.next,\n        state.position,\n        state.randomizer,\n        10,\n      );\n\n      return {\n        ...state,\n        board,\n        current,\n        next,\n        position,\n        randomizer,\n      };\n     }\n    case ActionTypes.MoveLeft:\n      return {\n        ...state,\n        position: Board.moveLeft(state.board, state.current, state.position, 10),\n      };\n    case ActionTypes.MoveRight:\n      return {\n        ...state,\n        position: Board.moveRight(state.board, state.current, state.position, 10),\n      };\n    case ActionTypes.Rotate:\n      return {\n        ...state,\n        current: Board.rotate(state.board, state.current, state.position, 10),\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport useInterval from '../hooks/useInterval';\nimport reducer, { initialState, ActionTypes } from '../reducer';\n\nexport default function App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  useKeyHandler('ArrowUp', () => dispatch(ActionTypes.Rotate));\n  useKeyHandler('ArrowDown', () => dispatch(ActionTypes.MoveDown));\n  useKeyHandler('ArrowLeft', () => dispatch(ActionTypes.MoveLeft));\n  useKeyHandler('ArrowRight', () => dispatch(ActionTypes.MoveRight));\n\n  useInterval(state.interval, () => dispatch(ActionTypes.Tick));\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position} />\n      <ScoreBoard level={state.level} next={state.next} score={state.score} />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n","import React from 'react';\n\nexport default function useInterval(delay, callback) {\n  const savedCallback = React.useRef();\n\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay != null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"],"sourceRoot":""}