{"version":3,"sources":["components/Block.tsx","utils/point.ts","utils/tetromino.ts","utils/game.ts","utils/randomizer.ts","utils/board.ts","components/Matrix.tsx","components/MainBoard.tsx","components/Preview.tsx","reducer.ts","components/ScoreBoard.tsx","hooks/useKeyHandler.ts","components/Lost.tsx","hooks/useTouchHandler.ts","components/Playing.tsx","hooks/useInterval.ts","components/App.tsx","index.ts"],"names":["Block","color","styling","useMemo","backgroundColor","getStyling","style","create","x","y","ShapeType","ShapeOrientation","type","orientation","Up","getShape","tetromino","shapes","rotate","n","StateTypes","L","Right","Down","Left","I","T","S","Z","O","J","shuffle","Object","keys","next","randomizer","head","tail","length","Randomizer","firstShape","secondShape","board","Board","current","Tetromino","level","position","Point","score","state","Playing","moveDown","game","linesRemoved","potentialPosition","isValid","isAtTop","Lost","nextBoard","commitTetrominoToBoard","isRemoving","numRows","columns","r","c","index","getBoardIndexFromPosition","getAtIndex","clone","beginningPosition","beginningIndex","fill","splice","emptyRow","Array","unshift","removeCompletedRows","linesCleared","nextShape","nextRandomizer","nextNext","nextPosition","nextScore","scoreRows","nextLevel","Math","floor","height","width","filled","value","shape","mappedBoard","setAtIndex","moveLeft","moveRight","potentialTetromino","maxColIndex","maxRowIndex","slice","Matrix","colors","styles","borderBottom","display","gridTemplateColumns","getStyles","boardWithTetromino","callback","map","i","key","MainBoard","children","container","0","1","2","Preview","ActionTypes","ScoreBoard","useKeyHandler","handler","useEffect","handleKeyDown","event","document","addEventListener","removeEventListener","reducer","action","Tick","MoveDown","Game","MoveLeft","MoveRight","Reset","Rotate","dispatch","dispatchReset","useCallback","text","onClick","textAlign","top","hammer","Hammer","body","useTouchHandler","swipeEvent","on","off","dispatchRotate","dispatchDown","dispatchLeft","dispatchRight","dispatchTick","delay","callbackRef","useRef","id","setInterval","clearInterval","useInterval","intervalFromLevel","initialState","ReactDOM","render","React","createElement","useReducer","getElementById"],"mappings":"oNAMe,SAASA,EAAT,GAAkC,IAAjBC,EAAgB,EAAhBA,MACxBC,EAAUC,mBAAQ,kBAK1B,SAAoBF,GAClB,MAAO,CACLG,gBAAiBH,GAPWI,CAAWJ,KAAQ,CAACA,IAElD,OAAO,yBAAKK,MAAOJ,I,0BCFd,SAASK,EAAOC,EAAWC,GAChC,MAAO,CAAED,IAAGC,K,oBCNFC,EAUAC,E,qOAeL,SAASJ,EAAOK,GACrB,MAAO,CACLA,OACAC,YAAaF,EAAiBG,IAO3B,SAASC,EAASC,GACvB,OAAOC,EAAOD,EAAUJ,MAAMI,EAAUH,aAMnC,SAASK,EAAOF,GACrB,O,yVAAO,CAAP,GACKA,EADL,CAEEH,aAIqBM,EAJQH,EAAUH,aAKjCM,EAAI,GAAK,KADnB,IAAyBA,G,SAjDbT,K,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,OAAAA,M,cAUAC,O,WAAAA,I,iBAAAA,I,eAAAA,I,gBAAAA,M,KA2CZ,IClDYS,EDkDNH,GAAM,mBACTP,EAAUW,GADD,mBAEPV,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KALD,cAOPH,EAAiBW,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAVD,cAYPX,EAAiBY,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAfD,cAiBPZ,EAAiBa,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApBD,kBAwBTd,EAAUe,GAxBD,mBAyBPd,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KA7BJ,cA+BPH,EAAiBW,MAAQ,CACxB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAnCJ,cAqCPX,EAAiBY,KAAO,CACvB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAzCJ,cA2CPZ,EAAiBa,KAAO,CACvB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KA/CJ,kBAmDTd,EAAUgB,GAnDD,mBAoDPf,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAvDD,cAyDPH,EAAiBW,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA5DD,cA8DPX,EAAiBY,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAjED,cAmEPZ,EAAiBa,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAtED,kBA0ETd,EAAUiB,GA1ED,mBA2EPhB,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA9ED,cAgFPH,EAAiBW,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAnFD,cAqFPX,EAAiBY,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAxFD,cA0FPZ,EAAiBa,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA7FD,kBAiGTd,EAAUkB,GAjGD,mBAkGPjB,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KArGD,cAuGPH,EAAiBW,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA1GD,cA4GPX,EAAiBY,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA/GD,cAiHPZ,EAAiBa,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApHD,kBAwHTd,EAAUmB,GAxHD,mBAyHPlB,EAAiBG,GAAK,CACrB,CAAC,EAAG,GACJ,CAAC,EAAG,KA3HE,cA6HPH,EAAiBW,MAAQ,CACxB,CAAC,EAAG,GACJ,CAAC,EAAG,KA/HE,cAiIPX,EAAiBY,KAAO,CACvB,CAAC,EAAG,GACJ,CAAC,EAAG,KAnIE,cAqIPZ,EAAiBa,KAAO,CACvB,CAAC,EAAG,GACJ,CAAC,EAAG,KAvIE,kBA2ITd,EAAUoB,GA3ID,mBA4IPnB,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA/ID,cAiJPH,EAAiBW,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApJD,cAsJPX,EAAiBY,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAzJD,cA2JPZ,EAAiBa,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA9JD,OE3CL,SAASjB,IACd,OAAOwB,kBAAQC,OAAOC,KAAKvB,IAWtB,SAASwB,EAAKC,GAAkD,IAAD,cAC5CA,GAAjBC,EAD6D,KACpDC,EADoD,WAGpE,OAAIA,EAAKC,OAAS,EACT,CAACF,EAAMC,GAGT,CAACD,EAAM7B,K,yjBDPT,SAASA,IAAgB,IAAD,EACSgC,EAAgBA,KADzB,mBACtBC,EADsB,OAEKD,EAFL,yBAEtBE,EAFsB,KAETN,EAFS,KAI7B,MAAO,CACLO,MAAOC,EAAa,GAAI,IACxBC,QAASC,EAAiBL,GAC1BM,MAAO,EACPZ,KAAMW,EAAiBJ,GACvBM,SAAUC,EAAa,EAAG,GAC1Bb,WAAYA,EACZc,MAAO,EACPC,MAAO9B,EAAW+B,SAIf,SAASC,EAASC,GAAmB,IAAD,EEkBpC,SACLX,EACAE,EACAE,EACAZ,EACAa,EACAZ,EACAc,EACAC,GAEA,IAUII,EAVEC,EAAoBP,EAAaD,EAASvC,EAAGuC,EAAStC,EAAI,GAEhE,GAAI+C,EAAQd,EAAOE,EAASW,GAC1B,MAAO,CAACb,EAAOE,EAASE,EAAOZ,EAAMqB,EAAmBpB,EAAYc,EAAOC,GAG7E,GAgGK,SAAiBH,GACtB,OAAsB,IAAfA,EAAStC,EAjGZgD,CAAQV,GACV,MAAO,CAACL,EAAOE,EAASE,EAAOZ,EAAMa,EAAUZ,EAAYc,EAAO7B,EAAWsC,MAI/E,IAAIC,EAAYC,EAAuBlB,EAAOE,EAASG,EAAU,GAZiC,EA8HpG,SAA6BL,GAM3B,IALA,IAAIY,EAAe,EACfK,EAAYjB,EACZmB,GAAa,EACXC,EAAUpB,EAAMJ,OAASI,EAAMqB,QAE5BC,EAAI,EAAGA,EAAIF,EAASE,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIvB,EAAMqB,QAASE,IAAK,CACtC,IAAMlB,EAAWC,EAAaiB,EAAGD,GAC3BE,EAAQC,EAA0BzB,EAAOK,GAG/C,GAAiC,IAA7BqB,EAAW1B,EAAOwB,GACpB,MAIF,GAAID,IAAMvB,EAAMqB,QAAU,EAAG,CAAC,IAAD,EAC3BT,GAA8B,EAGzBO,IACHA,GAAa,EACbF,EAAYU,EAAMV,IAIpB,IAAMW,EAAoBtB,EAAa,EAAGgB,GACpCO,EAAiBJ,EAA0BzB,EAAO4B,GACxDX,EAAUa,KAAKC,OAAOF,EAAgB7B,EAAMqB,SAG5C,IAAMW,EAAWF,eAAK,IAAIG,MAAMjC,EAAMqB,SAAU,EAAG,IACnD,EAAAJ,EAAUa,MAAKI,QAAf,oBAA0BF,KAKhC,MAAO,CAACf,EAAWL,GAvJSuB,CAAoBlB,GAbkD,mBAajGA,EAbiG,KAatFL,EAbsF,KAclGK,EAAUmB,aAAenB,EAAUmB,aAAexB,EAdgD,MAgB9Df,EAAgBJ,GAhB8C,mBAgB3F4C,EAhB2F,KAgBhFC,EAhBgF,KAiB5FC,EAAWpC,EAAiBkC,GAC5BG,EAAelC,EAAa,EAAG,GAC/BmC,EAAYlC,EAuJpB,SAAmBK,EAAsBR,GACvC,OAAQQ,GACN,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,IAAMR,EAAQ,GACvB,KAAK,EACH,OAAO,KAAOA,EAAQ,GACxB,KAAK,EACH,OAAO,KAAOA,EAAQ,GACxB,KAAK,EACH,OAAO,MAAQA,EAAQ,GACzB,QAGE,OAAO,GAtKesC,CAAU9B,EAAcR,GAC5CuC,EAAYC,KAAKC,MAAM5B,EAAUmB,aAAe,IAEtD,MAAO,CAACnB,EAAWzB,EAAMmD,EAAWJ,EAAUC,EAAcF,EAAgBG,EAAWjC,GFhDTP,CAC5EU,EAAKX,MACLW,EAAKT,QACLS,EAAKP,MACLO,EAAKnB,KACLmB,EAAKN,SACLM,EAAKlB,WACLkB,EAAKJ,MACLI,EAAKH,OATkC,mBAYzC,OAAO,KACFG,EADL,CAEEX,MAduC,KAevCE,QAfuC,KAgBvCE,MAhBuC,KAiBvCZ,KAjBuC,KAkBvCa,SAlBuC,KAmBvCZ,WAnBuC,KAoBvCc,MApBuC,KAqBvCC,MArBuC,O,8NEtBpC,SAAS3C,EAAOiF,EAAgBC,GACrC,IAAMC,EAASlB,eAAK,IAAIG,MAAMa,EAASC,GAAQ,EAAG,GAElD,MAAO,CACL1B,QAAS0B,EACTjB,KAAMkB,EACNpD,OAAQoD,EAAOpD,OACfwC,aAAc,GAOX,SAASlB,EACdlB,EACA1B,EACA+B,EACA4C,GAKA,IAHA,IAAMC,EAAQ/C,EAAmB7B,GAC3B6E,EAAcxB,EAAM3B,GAEjBsB,EAAI,EAAGA,EAAI4B,EAAMtD,OAAQ0B,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAI2B,EAAM5B,GAAG1B,OAAQ2B,IAAK,CAExC,GAAoB,IAAhB2B,EAAM5B,GAAGC,GAGb6B,EAAWD,EADG1B,EAA0BzB,EAAOM,EAAaD,EAASvC,EAAIyD,EAAGlB,EAAStC,EAAIuD,IAC1D2B,GAInC,OAAOE,EA4CF,SAASE,EAASrD,EAAc1B,EAA2B+B,GAChE,IAAMQ,EAAoBP,EAAaD,EAASvC,EAAI,EAAGuC,EAAStC,GAEhE,OAAI+C,EAAQd,EAAO1B,EAAWuC,GACrBA,EAGFR,EAMF,SAASiD,EAAUtD,EAAc1B,EAA2B+B,GACjE,IAAMQ,EAAoBP,EAAaD,EAASvC,EAAI,EAAGuC,EAAStC,GAEhE,OAAI+C,EAAQd,EAAO1B,EAAWuC,GACrBA,EAGFR,EAMF,SAAS7B,EAAOwB,EAAc1B,EAA2B+B,GAC9D,IAAMkD,EAAqBpD,EAAiB7B,GAE5C,OAAIwC,EAAQd,EAAOuD,EAAoBlD,GAC9BkD,EAGFjF,EAOT,SAASwC,EAAQd,EAAc1B,EAA2B+B,GAKxD,IAJA,IAAM6C,EAAQ/C,EAAmB7B,GAC3BkF,EAAcxD,EAAMqB,QAAU,EAC9BoC,EAAezD,EAAMJ,OAASI,EAAMqB,QAAW,EAE5CC,EAAI,EAAGA,EAAI4B,EAAMtD,OAAQ0B,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAI2B,EAAM5B,GAAG1B,OAAQ2B,IAEnC,GAAoB,IAAhB2B,EAAM5B,GAAGC,GAAb,CAGA,GAAIlB,EAASvC,EAAIyD,EAAI,GAAKlB,EAASvC,EAAIyD,EAAIiC,EAAe,OAAO,EAGjE,GAAInD,EAAStC,EAAIuD,EAAI,GAAKjB,EAAStC,EAAIuD,EAAImC,EAAe,OAAO,EAIjE,GAAiC,IAA7B/B,EAAW1B,EADDyB,EAA0BzB,EAAOM,EAAaD,EAASvC,EAAIyD,EAAGlB,EAAStC,EAAIuD,KACnD,OAAO,EAIjD,OAAO,EAiBT,SAASG,EAA0BzB,EAAcK,GAC/C,OAAOA,EAASvC,EAAKuC,EAAStC,EAAIiC,EAAMqB,QAG1C,SAASM,EAAM3B,GACb,O,yVAAO,IACFA,EADL,CAEE8B,KAAM9B,EAAM8B,KAAK4B,UAIrB,SAAShC,EAAW1B,EAAcwB,GAChC,OAAOxB,EAAM8B,KAAKN,GAGpB,SAAS4B,EAAWpD,EAAcwB,EAAeyB,GAC/CjD,EAAM8B,KAAKN,GAASyB,EC/KP,SAASU,EAAT,GAOJ,IANT3D,EAMQ,EANRA,MACA4D,EAKQ,EALRA,OACA1D,EAIQ,EAJRA,QACA4C,EAGQ,EAHRA,OACAzC,EAEQ,EAFRA,SACA0C,EACQ,EADRA,MAEMc,EAASpG,mBAAQ,kBAYzB,SAAmB4D,EAAiByB,EAAgBC,GAClD,MAAO,CACLe,aAAc,iBACdC,QAAS,OACTC,oBAAoB,UAAD,OAAY3C,EAAZ,UACnByB,OAAQA,EACRC,MAAOA,GAlBoBkB,CAAUjE,EAAMqB,QAASyB,EAAQC,KAAQ,CAAC/C,EAAMqB,QAASyB,EAAQC,IACxFmB,EAAqBjE,EAA6BD,EAAOE,EAASG,EAAU,GAElF,OACE,yBAAKzC,MAAOiG,GDwIT,SAAa7D,EAAcmE,GAChC,OAAOnE,EAAM8B,KAAKsC,IAAID,GCxIjBlE,CAAUiE,GAAoB,SAACpC,EAAcuC,GAC5C,OAAO,kBAAC/G,EAAD,CAAOC,MAAOqG,EAAO9B,GAAOwC,IAAG,UAAKD,EAAL,YAAUvC,SChBzC,SAASyC,EAAT,GAAmE,IAA9CvE,EAA6C,EAA7CA,MAAOwE,EAAsC,EAAtCA,SAAUtE,EAA4B,EAA5BA,QAASG,EAAmB,EAAnBA,SAC5D,OACE,yBAAKzC,MAAOiG,EAAOY,WACjB,kBAACd,EAAD,CACE3D,MAAOA,EACP4D,OAAQA,EACR1D,QAASA,EACT4C,OAAQ,IACRzC,SAAUA,EACV0C,MAAO,MAERyB,I,SJnBK9F,O,qBAAAA,I,aAAAA,I,gBAAAA,M,KIwBZ,IAAMkF,EAAS,CACbc,EAAG,QACHC,EAAG,aACHC,EAAG,aAGCf,EAAS,CACbY,UAAW,CACTpE,SAAU,aC/BRL,EAAQC,EAAa,EAAG,GACxBI,EAAWC,EAAa,EAAG,GAMlB,SAASuE,EAAT,GAAmC,IAAhBrF,EAAe,EAAfA,KAChC,OACE,kBAACmE,EAAD,CACE3D,MAAOA,EACP4D,OAAQA,GACR1D,QAASV,EACTsD,OAAQ,IACRzC,SAAUA,EACV0C,MAAO,MAKb,ICxBY+B,GDwBNlB,GAAS,CACbc,EAAG,QACHC,EAAG,aACHC,EAAG,UElBU,SAASG,GAAT,GAA8D,IAAxCP,EAAuC,EAAvCA,SAAUpE,EAA6B,EAA7BA,MAAOZ,EAAsB,EAAtBA,KAAMe,EAAgB,EAAhBA,MAC1D,OACE,6BACE,kBAACsE,EAAD,CAASrF,KAAMA,IACf,uCAAaY,GACb,uCAAaG,GACb,6BACGiE,IChBM,SAASQ,GAAcV,EAAaW,GACjDC,qBAAU,WACR,SAASC,EAAcC,GACjBA,EAAMd,MAAQA,GAChBW,EAAQG,GAMZ,OAFAC,SAASC,iBAAiB,UAAWH,GAE9B,kBAAME,SAASE,oBAAoB,UAAWJ,MACpD,CAACb,EAAKW,IFAI,SAASO,GAAQhF,EAAkBiF,GAChD,OAAQA,GACN,KAAKX,GAAYY,KACjB,KAAKZ,GAAYa,SACf,OAAOC,EAAcpF,GACvB,KAAKsE,GAAYe,SACf,ON+CG,KADgBlF,EM9CEH,EN+CzB,CAEEH,SAAUJ,EAAeU,EAAKX,MAAOW,EAAKT,QAASS,EAAKN,YMhDxD,KAAKyE,GAAYgB,UACf,ONmDC,SAAmBnF,GACxB,OAAO,KACFA,EADL,CAEEN,SAAUJ,EAAgBU,EAAKX,MAAOW,EAAKT,QAASS,EAAKN,YMtDhDuF,CAAepF,GACxB,KAAKsE,GAAYiB,MACf,OAAOH,IACT,KAAKd,GAAYkB,OACf,ONsDC,SAAgBrF,GACrB,OAAO,KACFA,EADL,CAEET,QAASD,EAAaU,EAAKX,MAAOW,EAAKT,QAASS,EAAKN,YMzD5CuF,CAAYpF,GACrB,QACE,OAAOA,ENsCN,IAAkBG,ESrDV,SAASK,GAAT,GAA2C,IAA3BiF,EAA0B,EAA1BA,SAAUzF,EAAgB,EAAhBA,MACjC0F,EAAgBC,uBAAY,kBAAMF,EAASnB,GAAYiB,SAAQ,CAACE,IAGtE,OAFAjB,GAAc,IAAKkB,GAGjB,yBAAKtI,MAAOiG,GAAOY,WACjB,kBAACF,EAAD,CAAWvE,MAAOQ,EAAMR,MAAOE,QAASM,EAAMN,QAASG,SAAUG,EAAMH,UACrE,0BAAMzC,MAAOiG,GAAOuC,MAApB,cAEF,kBAACrB,GAAD,CAAY3E,MAAOI,EAAMJ,MAAOZ,KAAMgB,EAAMhB,KAAMe,MAAOC,EAAMD,OAC7D,4BAAQ8F,QAASH,GAAjB,Y,SHpBIpB,K,gBAAAA,E,gBAAAA,E,kBAAAA,E,cAAAA,E,gBAAAA,E,cAAAA,E,YAAAA,E,aAAAA,Q,KG0BZ,IAAMjB,GAAS,CACbY,UAAW,CACTV,QAAS,QAEXqC,KAAM,CACJ1I,gBAAiB,aACjBH,MAAO,QACPwG,QAAS,QACT1D,SAAU,WACViG,UAAW,SACXC,IAAK,MACLxD,MAAO,S,aClCLyD,GAAS,I,QAAIC,GAAOpB,SAASqB,MAEpB,SAASC,GAAgBC,EAAwB3B,GAC9DC,qBAAU,WAER,OADAsB,GAAOK,GAAGD,EAAY3B,GACf,kBAAMuB,GAAOM,IAAIF,EAAY3B,MACnC,CAAC2B,EAAY3B,ICGH,SAASxE,GAAT,GAA8C,IAA3BwF,EAA0B,EAA1BA,SAAUzF,EAAgB,EAAhBA,MACpCuG,EAAiBZ,uBAAY,kBAAMF,EAASnB,GAAYkB,UAAS,CAACC,IAClEe,EAAeb,uBAAY,kBAAMF,EAASnB,GAAYa,YAAW,CAACM,IAClEgB,EAAed,uBAAY,kBAAMF,EAASnB,GAAYe,YAAW,CAACI,IAClEiB,EAAgBf,uBAAY,kBAAMF,EAASnB,GAAYgB,aAAY,CAACG,IACpEkB,EAAehB,uBAAY,kBAAMF,EAASnB,GAAYY,QAAO,CAACO,IAapE,OAXAjB,GAAc,UAAW+B,GACzB/B,GAAc,YAAagC,GAC3BhC,GAAc,YAAaiC,GAC3BjC,GAAc,aAAckC,GAE5BP,GAAgB,YAAaM,GAC7BN,GAAgB,aAAcO,GAC9BP,GAAgB,MAAOI,GC1BV,SAAqB5C,EAAsBiD,GACxD,IAAMC,EAAeC,iBAAOnD,GAE5Be,qBAAU,WACRmC,EAAYnH,QAAUiE,IACrB,CAACA,IAEJe,qBAAU,WACR,IAAMqC,EAAKC,YAAYH,EAAYnH,QAASkH,GAC5C,OAAO,kBAAMK,cAAcF,MAC1B,CAACH,EAAOC,IDkBXK,CAAYP,EAgBd,SAA2B/G,GACzB,OAAQA,GACN,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,QAAS,OAAO,KAxBQuH,CAAkBnH,EAAMJ,QAGhD,yBAAKxC,MAAOiG,GAAOY,WACjB,kBAACF,EAAD,CAAWvE,MAAOQ,EAAMR,MAAOE,QAASM,EAAMN,QAASG,SAAUG,EAAMH,WACvE,kBAAC0E,GAAD,CAAY3E,MAAOI,EAAMJ,MAAOZ,KAAMgB,EAAMhB,KAAMe,MAAOC,EAAMD,SAKrE,IAAMsD,GAAS,CACbY,UAAW,CACTV,QAAS,SEpCb,IAAM6D,GAAehC,ICDrBiC,IAASC,OAAOC,IAAMC,eDGP,WAAgB,IAAD,EACFC,qBAAWzC,GAASoC,IADlB,mBACrBpH,EADqB,KACdyF,EADc,KAG5B,OAAQzF,EAAMA,OACZ,KAAKoF,EAAgB5E,KACnB,OAAO,kBAACA,GAAD,CAAMiF,SAAUA,EAAUzF,MAAOA,IAC1C,KAAKoF,EAAgBnF,QACnB,OAAO,kBAACA,GAAD,CAASwF,SAAUA,EAAUzF,MAAOA,IAC7C,QACE,OAAO,SCZ6B6E,SAAS6C,eAAe,W","file":"static/js/main.cd101b71.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\ntype Props = {\n  color: string,\n}\n\nexport default function Block({ color }: Props) {\n  const styling = useMemo(() => getStyling(color), [color]);\n\n  return <div style={styling} />;\n}\n\nfunction getStyling(color: string) {\n  return {\n    backgroundColor: color,\n  };\n}\n","export type Type = Point;\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nexport function create(x: number, y: number): Point {\n  return { x, y };\n}\n","export type Type = Tetromino;\n\nexport enum ShapeType {\n  L = 'L',\n  I = 'I',\n  T = 'T',\n  S = 'S',\n  Z = 'Z',\n  O = 'O',\n  J = 'J',\n}\n\nexport enum ShapeOrientation {\n  Up,\n  Right,\n  Down,\n  Left,\n}\n\ninterface Tetromino {\n  type: ShapeType;\n  orientation: ShapeOrientation;\n}\n\n/**\n * Create a new Tetromino.\n */\nexport function create(type: ShapeType): Tetromino {\n  return {\n    type,\n    orientation: ShapeOrientation.Up,\n  };\n}\n\n/**\n * Get the current blocks for a piece and orientation.\n */\nexport function getShape(tetromino: Tetromino) {\n  return shapes[tetromino.type][tetromino.orientation];\n}\n\n/**\n * Rotate a Tetromino clockwise.\n */\nexport function rotate(tetromino: Tetromino): Tetromino {\n  return {\n    ...tetromino,\n    orientation: nextOrientation(tetromino.orientation),\n  };\n}\n\nfunction nextOrientation(n: number) {\n  return (n + 1) % 4;\n}\n\nconst shapes = {\n  [ShapeType.L]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.I]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  },\n\n  [ShapeType.T]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.S]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.Z]: {\n    [ShapeOrientation.Up]: [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  },\n\n  [ShapeType.O]: {\n    [ShapeOrientation.Up]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Right]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1],\n      [1, 1],\n    ],\n  },\n\n  [ShapeType.J]: {\n    [ShapeOrientation.Up]: [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  },\n};\n","import * as Board from './board';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\n\nexport enum StateTypes {\n  Playing,\n  Won,\n  Lost,\n};\n\ninterface Game {\n  board: Board.Type,\n  current: Tetromino.Type,\n  level: number,\n  next: Tetromino.Type,\n  position: Point.Type,\n  randomizer: Randomizer.Type,\n  score: number,\n  state: StateTypes,\n};\n\nexport type Type = Game;\n\nexport function create(): Game {\n  const [firstShape, firstRandomizer] = Randomizer.next(Randomizer.create());\n  const [secondShape, randomizer] = Randomizer.next(firstRandomizer);\n\n  return {\n    board: Board.create(20, 10),\n    current: Tetromino.create(firstShape),\n    level: 0,\n    next: Tetromino.create(secondShape),\n    position: Point.create(3, 0),\n    randomizer: randomizer,\n    score: 0,\n    state: StateTypes.Playing,\n  };\n}\n\nexport function moveDown(game: Game): Game {\n  const [board, current, level, next, position, randomizer, score, nextState] = Board.moveDown(\n    game.board,\n    game.current,\n    game.level,\n    game.next,\n    game.position,\n    game.randomizer,\n    game.score,\n    game.state,\n  );\n\n  return {\n    ...game,\n    board,\n    current,\n    level,\n    next,\n    position,\n    randomizer,\n    score,\n    state: nextState,\n  };\n}\n\nexport function moveLeft(game: Game): Game {\n  return {\n    ...game,\n    position: Board.moveLeft(game.board, game.current, game.position),\n  };\n}\n\nexport function moveRight(game: Game): Game {\n  return {\n    ...game,\n    position: Board.moveRight(game.board, game.current, game.position),\n  };\n}\n\nexport function rotate(game: Game): Game {\n  return {\n    ...game,\n    current: Board.rotate(game.board, game.current, game.position),\n  };\n}\n","import { shuffle } from 'lodash';\nimport { ShapeType } from './tetromino';\n\nexport type Type = Randomizer;\n\ntype Randomizer = ShapeType[];\n\n/**\n * Create a new randomizer object, which s passed in to the other methods in this module to get\n * random numbers.\n * @see http://tetris.wikia.com/wiki/Random_Generator.\n */\nexport function create(): Randomizer {\n  return shuffle(Object.keys(ShapeType) as ShapeType[]);\n}\n\n/**\n * Retrieve the next shape. Returns an array with a value and the next randomizer.\n *\n * Example:\n *\n *   [val, randomizer] = next(randomizer);\n *\n */\nexport function next(randomizer: Randomizer): [ShapeType, Randomizer] {\n  const [head, ...tail] = randomizer;\n\n  if (tail.length > 0) {\n    return [head, tail];\n  }\n\n  return [head, create()];\n}\n","import { fill } from 'lodash';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\nimport { StateTypes } from './game';\n\nexport type Type = Board;\n\ninterface Board {\n  columns: number;\n  fill: number[];\n  length: number;\n  linesCleared: number;\n}\n\n/**\n * Create a new board.\n */\nexport function create(height: number, width: number): Board {\n  const filled = fill(new Array(height * width), 0, 0);\n\n  return {\n    columns: width,\n    fill: filled,\n    length: filled.length,\n    linesCleared: 0,\n  };\n}\n\n/**\n * Add a tetromino to a board.\n */\nexport function commitTetrominoToBoard(\n  board: Board,\n  tetromino: Tetromino.Type,\n  position: Point.Type,\n  value: number,\n): Board {\n  const shape = Tetromino.getShape(tetromino);\n  const mappedBoard = clone(board);\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      setAtIndex(mappedBoard, index, value);\n    }\n  }\n\n  return mappedBoard;\n}\n\n/**\n * Move a tetromino down, if possible. If not possible, add the tetromino to the board and create a\n * new tetromino.\n */\nexport function moveDown(\n  board: Board,\n  current: Tetromino.Type,\n  level: number,\n  next: Tetromino.Type,\n  position: Point.Type,\n  randomizer: Randomizer.Type,\n  score: number,\n  state: StateTypes,\n): [Board, Tetromino.Type, number, Tetromino.Type, Point.Type, Randomizer.Type, number, StateTypes] {\n  const potentialPosition = Point.create(position.x, position.y + 1);\n\n  if (isValid(board, current, potentialPosition)) {\n    return [board, current, level, next, potentialPosition, randomizer, score, state];\n  }\n\n  if (isAtTop(position)) {\n    return [board, current, level, next, position, randomizer, score, StateTypes.Lost];\n  }\n\n  let linesRemoved;\n  let nextBoard = commitTetrominoToBoard(board, current, position, 1);\n  [nextBoard, linesRemoved] = removeCompletedRows(nextBoard);\n  nextBoard.linesCleared = nextBoard.linesCleared + linesRemoved;\n\n  const [nextShape, nextRandomizer] = Randomizer.next(randomizer);\n  const nextNext = Tetromino.create(nextShape);\n  const nextPosition = Point.create(3, 0);\n  const nextScore = score + scoreRows(linesRemoved, level);\n  const nextLevel = Math.floor(nextBoard.linesCleared / 10);\n\n  return [nextBoard, next, nextLevel, nextNext, nextPosition, nextRandomizer, nextScore, state];\n}\n\n/**\n * Move a tetromino left, if possible. Either way, return a position.\n */\nexport function moveLeft(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x - 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Move a tetromino right, if possible. Either way, return a position.\n */\nexport function moveRight(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x + 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Rotate a tetromino, if possible. Either way, return a tetromino.\n */\nexport function rotate(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialTetromino = Tetromino.rotate(tetromino);\n\n  if (isValid(board, potentialTetromino, position)) {\n    return potentialTetromino;\n  }\n\n  return tetromino;\n}\n\n/**\n * Determine if a tetromino at a certain position on the board is \"valid\". In other words, doesn't\n * overlap with any existing filled spots and is completely on the board.\n */\nfunction isValid(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const shape = Tetromino.getShape(tetromino);\n  const maxColIndex = board.columns - 1;\n  const maxRowIndex = (board.length / board.columns) - 1;\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      // If the horizontal position is off the board, it's not valid.\n      if (position.x + c < 0 || position.x + c > maxColIndex) { return false; }\n\n      // If the vertical position is off the board, it's not valid.\n      if (position.y + r < 0 || position.y + r > maxRowIndex) { return false; }\n\n      // If this part of the shape is over a part of the board that's \"on\", it's not valid.\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      if (getAtIndex(board, index) === 1) { return false; }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Execute a callback for every location on a board, and return the resulting array.\n */\nexport function map(board: Board, callback: (x: number, index: number) => unknown) {\n  return board.fill.map(callback);\n}\n\n/**\n * Determine if a position is at the \"top\" of the screen.\n */\nexport function isAtTop(position: Point.Type) {\n  return position.y === 0;\n}\n\nfunction getBoardIndexFromPosition(board: Board, position: Point.Type) {\n  return position.x + (position.y * board.columns);\n}\n\nfunction clone(board: Board): Board {\n  return {\n    ...board,\n    fill: board.fill.slice(),\n  };\n}\n\nfunction getAtIndex(board: Board, index: number) {\n  return board.fill[index];\n}\n\nfunction setAtIndex(board: Board, index: number, value: number): void {\n  board.fill[index] = value;\n}\n\nfunction removeCompletedRows(board: Board): [Board, number] {\n  let linesRemoved = 0;\n  let nextBoard = board;\n  let isRemoving = false;\n  const numRows = board.length / board.columns;\n\n  for (let r = 0; r < numRows; r++) {\n    for (let c = 0; c < board.columns; c++) {\n      const position = Point.create(c, r);\n      const index = getBoardIndexFromPosition(board, position);\n\n      // If any part of this row is 0, stop and move on to the next row.\n      if (getAtIndex(board, index) === 0) {\n        break;\n      }\n\n      // If this is the last column in the row, the row must be completed.\n      if (c === board.columns - 1) {\n        linesRemoved = linesRemoved + 1;\n\n        // If we haven't created a new board, yet, do so.\n        if (!isRemoving) {\n          isRemoving = true;\n          nextBoard = clone(nextBoard);\n        }\n\n        // Remove the row from the board.\n        const beginningPosition = Point.create(0, r);\n        const beginningIndex = getBoardIndexFromPosition(board, beginningPosition);\n        nextBoard.fill.splice(beginningIndex, board.columns);\n\n        // Add an empty row to the top.\n        const emptyRow = fill(new Array(board.columns), 0, 0);\n        nextBoard.fill.unshift(...emptyRow);\n      }\n    }\n  }\n\n  return [nextBoard, linesRemoved];\n}\n\n/**\n * @see https://tetris.fandom.com/wiki/Scoring\n */\nfunction scoreRows(linesRemoved: number, level: number) {\n  switch (linesRemoved) {\n    case 0:\n      return 0;\n    case 1:\n      return 40 * (level + 1);\n    case 2:\n      return 100 * (level + 1);\n    case 3:\n      return 300 * (level + 1);\n    case 4:\n      return 1200 * (level + 1);\n    default:\n      // Should not be possible to reach this case, as the number of lines removed can only be\n      // between 0 and 4.\n      return 0;\n  }\n}\n","import React, { useMemo } from 'react';\nimport Block from './Block';\nimport * as Board from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board.Type,\n  colors: { [index: string]: string },\n  current: Tetromino,\n  height: number,\n  position: Point,\n  width: number,\n}\n\nexport default function Matrix({\n  board,\n  colors,\n  current,\n  height,\n  position,\n  width,\n}: Props) {\n  const styles = useMemo(() => getStyles(board.columns, height, width), [board.columns, height, width]);\n  const boardWithTetromino = Board.commitTetrominoToBoard(board, current, position, 2);\n\n  return (\n    <div style={styles}>\n      {Board.map(boardWithTetromino, (fill: number, i: number) => {\n        return <Block color={colors[fill]} key={`${i}-${fill}`} />;\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns: number, height: number, width: number) {\n  return {\n    borderBottom: '1px solid grey',\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: height,\n    width: width,\n  };\n}\n","import React from 'react';\nimport Matrix from './Matrix';\nimport { Type as Board } from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board,\n  children?: React.ReactNode,\n  current: Tetromino,\n  position: Point,\n}\n\nexport default function MainBoard({ board, children, current, position }: Props) {\n  return (\n    <div style={styles.container}>\n      <Matrix\n        board={board}\n        colors={colors}\n        current={current}\n        height={400}\n        position={position}\n        width={200}\n      />\n      {children}\n    </div>\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'limegreen',\n};\n\nconst styles = {\n  container: {\n    position: 'relative' as const,\n  },\n};\n","import React from 'react';\nimport Matrix from './Matrix';\nimport * as Board from '../utils/board';\nimport * as Point from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\nconst board = Board.create(5, 5);\nconst position = Point.create(1, 1);\n\ntype Props = {\n  next: Tetromino,\n}\n\nexport default function Preview({ next }: Props) {\n  return (\n    <Matrix\n      board={board}\n      colors={colors}\n      current={next}\n      height={100}\n      position={position}\n      width={100}\n    />\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'yellow',\n};\n","import * as Game from './utils/game';\n\nexport enum ActionTypes {\n  MoveDown = 'down',\n  MoveLeft = 'left',\n  MoveRight = 'right',\n  Reset = 'reset',\n  Rotate = 'rotate',\n  Start = 'start',\n  Stop = 'stop',\n  Tick = 'tick',\n};\n\nexport default function reducer(state: Game.Type, action: ActionTypes) {\n  switch (action) {\n    case ActionTypes.Tick:\n    case ActionTypes.MoveDown:\n      return Game.moveDown(state);\n    case ActionTypes.MoveLeft:\n      return Game.moveLeft(state);\n    case ActionTypes.MoveRight:\n      return Game.moveRight(state);\n    case ActionTypes.Reset:\n      return Game.create();\n    case ActionTypes.Rotate:\n      return Game.rotate(state);\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport Preview from './Preview';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  children?: React.ReactNode,\n  level: number,\n  next: Tetromino,\n  score: number,\n}\n\nexport default function ScoreBoard({ children, level, next, score }: Props) {\n  return (\n    <div>\n      <Preview next={next} />\n      <div>Level: {level}</div>\n      <div>Score: {score}</div>\n      <div>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n\nexport default function useKeyHandler(key: string, handler: (event: KeyboardEvent) => void) {\n  useEffect(() => {\n    function handleKeyDown(event: KeyboardEvent) {\n      if (event.key === key) {\n        handler(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [key, handler]);\n}\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport { ActionTypes } from '../reducer';\nimport { Type as Game } from '../utils/game';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: Game,\n}\n\nexport default function Lost({ dispatch, state }: Props) {\n  const dispatchReset = useCallback(() => dispatch(ActionTypes.Reset), [dispatch]);\n  useKeyHandler(' ', dispatchReset);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position}>\n        <span style={styles.text}>You lost!</span>\n      </MainBoard>\n      <ScoreBoard level={state.level} next={state.next} score={state.score}>\n        <button onClick={dispatchReset}>Reset</button>\n      </ScoreBoard>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n  text: {\n    backgroundColor: 'whitesmoke',\n    color: 'black',\n    display: 'block',\n    position: 'absolute' as const,\n    textAlign: 'center' as const,\n    top: '50%',\n    width: '100%',\n  },\n};\n","import Hammer from 'hammerjs';\nimport { useEffect } from 'react';\n\ntype SwipeEvent = 'swipeleft' | 'swiperight' | 'swipeup' | 'swipedown' | 'tap';\n\nconst hammer = new Hammer(document.body);\n\nexport default function useTouchHandler(swipeEvent: SwipeEvent, handler: () => void): void {\n  useEffect(() => {\n    hammer.on(swipeEvent, handler);\n    return () => hammer.off(swipeEvent, handler);\n  }, [swipeEvent, handler]);\n}\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport useInterval from '../hooks/useInterval';\nimport useTouchHandler from '../hooks/useTouchHandler';\nimport { ActionTypes } from '../reducer';\nimport { Type as Game } from '../utils/game';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: Game,\n}\n\nexport default function Playing({ dispatch, state }: Props) {\n  const dispatchRotate = useCallback(() => dispatch(ActionTypes.Rotate), [dispatch]);\n  const dispatchDown = useCallback(() => dispatch(ActionTypes.MoveDown), [dispatch]);\n  const dispatchLeft = useCallback(() => dispatch(ActionTypes.MoveLeft), [dispatch]);\n  const dispatchRight = useCallback(() => dispatch(ActionTypes.MoveRight), [dispatch]);\n  const dispatchTick = useCallback(() => dispatch(ActionTypes.Tick), [dispatch]);\n\n  useKeyHandler('ArrowUp', dispatchRotate);\n  useKeyHandler('ArrowDown', dispatchDown);\n  useKeyHandler('ArrowLeft', dispatchLeft);\n  useKeyHandler('ArrowRight', dispatchRight);\n\n  useTouchHandler('swipeleft', dispatchLeft);\n  useTouchHandler('swiperight', dispatchRight);\n  useTouchHandler('tap', dispatchRotate);\n\n  useInterval(dispatchTick, intervalFromLevel(state.level));\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position} />\n      <ScoreBoard level={state.level} next={state.next} score={state.score} />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n};\n\nfunction intervalFromLevel(level: number) {\n  switch (level) {\n    case 0: return 750;\n    case 1: return 650;\n    case 2: return 550;\n    case 3: return 450;\n    case 4: return 350;\n    case 5: return 250;\n    default: return 150;\n  }\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback: () => void, delay: number) {\n  const callbackRef  = useRef(callback);\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    const id = setInterval(callbackRef.current, delay);\n    return () => clearInterval(id);\n  }, [delay, callbackRef]);\n}\n","import React, { useReducer } from 'react';\nimport Lost from './Lost';\nimport Playing from './Playing';\nimport reducer from '../reducer';\nimport * as Game from '../utils/game';\n\nconst initialState = Game.create();\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  switch (state.state) {\n    case Game.StateTypes.Lost:\n      return <Lost dispatch={dispatch} state={state} />;\n    case Game.StateTypes.Playing:\n      return <Playing dispatch={dispatch} state={state} />;\n    default:\n      return null;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}