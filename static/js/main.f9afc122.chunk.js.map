{"version":3,"sources":["components/Block.tsx","utils/point.ts","utils/tetromino.ts","utils/randomizer.ts","utils/board.ts","components/Matrix.tsx","components/MainBoard.tsx","components/Preview.tsx","components/ScoreBoard.tsx","hooks/useKeyHandler.ts","reducer.ts","components/Paused.tsx","components/Playing.tsx","hooks/useInterval.ts","index.ts","components/App.tsx"],"names":["Block","_ref","color","styling","useMemo","backgroundColor","getStyling","react_default","a","createElement","style","create","x","y","ShapeType","ShapeOrientation","type","orientation","Up","getShape","tetromino","shapes","_shapes","Object","defineProperty","L","_ShapeType$L","Right","Down","Left","I","_ShapeType$I","T","_ShapeType$T","S","_ShapeType$S","Z","_ShapeType$Z","O","_ShapeType$O","J","_ShapeType$J","shuffle","keys","next","randomizer","_randomizer","toArray","head","tail","slice","length","height","width","filled","fill","Array","columns","commitTetrominoToBoard","board","position","value","shape","Tetromino","mappedBoard","objectSpread","clone","r","c","setAtIndex","getBoardIndexFromPosition","Point","moveLeft","potentialPosition","isValid","moveRight","rotate","potentialTetromino","n","maxColIndex","maxRowIndex","getAtIndex","index","Matrix","colors","current","styles","borderBottom","display","gridTemplateColumns","concat","getStyles","boardWithTetromino","Board","callback","map","i","key","MainBoard","children","container","0","1","2","Preview","ScoreBoard","level","score","useKeyHandler","handler","useEffect","handleKeyDown","event","document","addEventListener","removeEventListener","StateTypes","ActionTypes","Randomizer","firstShape","secondShape","initialState","interval","state","Paused","reducer","action","Tick","MoveDown","_Board$moveDown","nextBoard","_Randomizer$next","_Randomizer$next2","slicedToArray","nextShape","nextRandomizer","_Board$moveDown2","MoveLeft","MoveRight","Rotate","Start","Playing","Stop","dispatch","dispatchStart","useCallback","text","onClick","textAlign","top","dispatchRotate","dispatchDown","dispatchLeft","dispatchRight","dispatchStop","dispatchTick","delay","savedCallback","useRef","id","setInterval","clearInterval","useInterval","ReactDOM","render","React","_useReducer","useReducer","_useReducer2","getElementById"],"mappings":"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","file":"static/js/main.f9afc122.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\ntype Props = {\n  color: string,\n}\n\nexport default function Block({ color }: Props) {\n  const styling = useMemo(() => getStyling(color), [color]);\n\n  return <div style={styling} />;\n}\n\nfunction getStyling(color: string) {\n  return {\n    backgroundColor: color,\n  };\n}\n","export type Type = Point;\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nexport function create(x: number, y: number): Point {\n  return { x, y };\n}\n\nexport function equals(a: Point, b: Point): boolean {\n  return a.x === b.x && a.y === b.y;\n}\n","export type Type = Tetromino;\n\nexport enum ShapeType {\n  L = 'L',\n  I = 'I',\n  T = 'T',\n  S = 'S',\n  Z = 'Z',\n  O = 'O',\n  J = 'J',\n}\n\nexport enum ShapeOrientation {\n  Up,\n  Right,\n  Down,\n  Left,\n}\n\ninterface Tetromino {\n  type: ShapeType;\n  orientation: ShapeOrientation;\n}\n\n/**\n * Create a new Tetromino.\n */\nexport function create(type: ShapeType): Tetromino {\n  return {\n    type,\n    orientation: ShapeOrientation.Up,\n  };\n}\n\n/**\n * Get the current blocks for a piece and orientation.\n */\nexport function getShape(tetromino: Tetromino) {\n  return shapes[tetromino.type][tetromino.orientation];\n}\n\n/**\n * Rotate a Tetromino clockwise.\n */\nexport function rotate(tetromino: Tetromino): Tetromino {\n  return {\n    ...tetromino,\n    orientation: nextOrientation(tetromino.orientation),\n  };\n}\n\nfunction nextOrientation(n: number) {\n  return (n + 1) % 4;\n}\n\nconst shapes = {\n  [ShapeType.L]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.I]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  },\n\n  [ShapeType.T]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.S]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.Z]: {\n    [ShapeOrientation.Up]: [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  },\n\n  [ShapeType.O]: {\n    [ShapeOrientation.Up]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Right]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1],\n      [1, 1],\n    ],\n  },\n\n  [ShapeType.J]: {\n    [ShapeOrientation.Up]: [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  },\n};\n","import { shuffle } from 'lodash';\nimport { ShapeType } from './tetromino';\n\nexport type Type = Randomizer;\n\ntype Randomizer = ShapeType[];\n\n/**\n * Create a new randomizer object, which s passed in to the other methods in this module to get\n * random numbers.\n * @see http://tetris.wikia.com/wiki/Random_Generator.\n */\nexport function create(): Randomizer {\n  return shuffle(Object.keys(ShapeType) as ShapeType[]);\n}\n\n/**\n * Retrieve the next shape. Returns an array with a value and the next randomizer.\n *\n * Example:\n *\n *   [val, randomizer] = next(randomizer);\n *\n */\nexport function next(randomizer: Randomizer): [ShapeType, Randomizer] {\n  const [head, ...tail] = randomizer;\n\n  if (tail.length > 0) {\n    return [head, tail];\n  }\n\n  return [head, create()];\n}\n","import { fill } from 'lodash';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\n\nexport type Type = Board;\n\ninterface Board {\n  columns: number;\n  fill: number[];\n  length: number;\n}\n\n/**\n * Create a new board.\n */\nexport function create(height: number, width: number): Board {\n  const filled = fill(new Array(height * width), 0, 0);\n\n  return {\n    columns: width,\n    fill: filled,\n    length: filled.length,\n  };\n}\n\n/**\n * Add a tetromino to a board.\n */\nexport function commitTetrominoToBoard(\n  board: Board,\n  tetromino: Tetromino.Type,\n  position: Point.Type,\n  value: number,\n): Board {\n  const shape = Tetromino.getShape(tetromino);\n  const mappedBoard = clone(board);\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      setAtIndex(mappedBoard, index, value);\n    }\n  }\n\n  return mappedBoard;\n}\n\n/**\n * Move a tetromino down, if possible. If not possible, add the tetromino to the board and create a\n * new tetromino.\n */\nexport function moveDown(\n  board: Board,\n  current: Tetromino.Type,\n  next: Tetromino.Type,\n  position: Point.Type,\n  randomizer: Randomizer.Type,\n): [Board, Tetromino.Type, Tetromino.Type, Point.Type, Randomizer.Type] {\n  const potentialPosition = Point.create(position.x, position.y + 1);\n\n  if (isValid(board, current, potentialPosition)) {\n    return [board, current, next, potentialPosition, randomizer];\n  }\n\n  const nextBoard = commitTetrominoToBoard(board, current, position, 1);\n  const [nextShape, nextRandomizer] = Randomizer.next(randomizer);\n  const nextNext = Tetromino.create(nextShape);\n  const nextPosition = Point.create(3, 0);\n\n  return [nextBoard, next, nextNext, nextPosition, nextRandomizer];\n}\n\n/**\n * Move a tetromino left, if possible. Either way, return a position.\n */\nexport function moveLeft(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x - 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Move a tetromino right, if possible. Either way, return a position.\n */\nexport function moveRight(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x + 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Rotate a tetromino, if possible. Either way, return a tetromino.\n */\nexport function rotate(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialTetromino = Tetromino.rotate(tetromino);\n\n  if (isValid(board, potentialTetromino, position)) {\n    return potentialTetromino;\n  }\n\n  return tetromino;\n}\n\n/**\n * Determine if a tetromino at a certain position on the board is \"valid\". In other words, doesn't\n * overlap with any existing filled spots and is completely on the board.\n */\nfunction isValid(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const shape = Tetromino.getShape(tetromino);\n  const maxColIndex = board.columns - 1;\n  const maxRowIndex = (board.length / board.columns) - 1;\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      // If the horizontal position is off the board, it's not valid.\n      if (position.x + c < 0 || position.x + c > maxColIndex) { return false; }\n\n      // If the vertical position is off the board, it's not valid.\n      if (position.y + r < 0 || position.y + r > maxRowIndex) { return false }\n\n      // If this part of the shape is over a part of the board that's \"on\", it's not valid.\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      if (getAtIndex(board, index) === 1) { return false; }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Execute a callback for every location on a board, and return the resulting array.\n */\nexport function map(board: Board, callback: (x: number, index: number) => unknown) {\n  return board.fill.map(callback);\n}\n\nfunction getBoardIndexFromPosition(board: Board, position: Point.Type) {\n  return position.x + (position.y * board.columns);\n}\n\nfunction clone(board: Board): Board {\n  return {\n    ...board,\n    fill: board.fill.slice(),\n  };\n}\n\nfunction getAtIndex(board: Board, index: number) {\n  return board.fill[index];\n}\n\nfunction setAtIndex(board: Board, index: number, value: number): void {\n  board.fill[index] = value;\n}\n","import React, { useMemo } from 'react';\nimport Block from './Block';\nimport * as Board from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board.Type,\n  colors: { [index: string]: string },\n  current: Tetromino,\n  height: number,\n  position: Point,\n  width: number,\n}\n\nexport default function Matrix({\n  board,\n  colors,\n  current,\n  height,\n  position,\n  width,\n}: Props) {\n  const styles = useMemo(() => getStyles(board.columns, height, width), [board.columns, height, width]);\n  const boardWithTetromino = Board.commitTetrominoToBoard(board, current, position, 2);\n\n  return (\n    <div style={styles}>\n      {Board.map(boardWithTetromino, (fill: number, i: number) => {\n        return <Block color={colors[fill]} key={`${i}-${fill}`} />\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns: number, height: number, width: number) {\n  return {\n    borderBottom: '1px solid grey',\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: height,\n    width: width,\n  };\n}\n","import React from 'react';\nimport Matrix from './Matrix';\nimport { Type as Board } from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board,\n  children?: React.ReactNode,\n  current: Tetromino,\n  position: Point,\n}\n\nexport default function MainBoard({ board, children, current, position }: Props) {\n  return (\n    <div style={styles.container}>\n      <Matrix\n        board={board}\n        colors={colors}\n        current={current}\n        height={400}\n        position={position}\n        width={200}\n      />\n      {children}\n    </div>\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'limegreen',\n};\n\nconst styles = {\n  container: {\n    position: 'relative' as 'relative',\n  },\n};\n","import React from 'react';\nimport Matrix from './Matrix';\nimport * as Board from '../utils/board';\nimport * as Point from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\nconst board = Board.create(5, 5);\nconst position = Point.create(1, 1);\n\ntype Props = {\n  next: Tetromino,\n}\n\nexport default function Preview({ next }: Props) {\n  return (\n    <Matrix\n      board={board}\n      colors={colors}\n      current={next}\n      height={100}\n      position={position}\n      width={100}\n    />\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'yellow',\n};\n","import React from 'react';\nimport Preview from './Preview';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  children?: React.ReactNode,\n  level: number,\n  next: Tetromino,\n  score: number,\n}\n\nexport default function ScoreBoard({ children, level, next, score }: Props) {\n  return (\n    <div>\n      <Preview next={next} />\n      <div>Level: {level}</div>\n      <div>Score: {score}</div>\n      <div>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n\nexport default function useKeyHandler(key: string, handler: (event: KeyboardEvent) => void) {\n  useEffect(() => {\n    function handleKeyDown(event: KeyboardEvent) {\n      if (event.key === key) {\n        handler(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [key, handler]);\n}\n","import * as Board from './utils/board';\nimport * as Point from './utils/point';\nimport * as Randomizer from './utils/randomizer';\nimport * as Tetromino from './utils/tetromino';\n\nconst [firstShape, firstRandomizer] = Randomizer.next(Randomizer.create());\nconst [secondShape, randomizer] = Randomizer.next(firstRandomizer);\n\nexport enum StateTypes {\n  Paused,\n  Playing,\n  Won,\n  Lost,\n};\n\nexport enum ActionTypes {\n  MoveDown = 'down',\n  MoveLeft = 'left',\n  MoveRight = 'right',\n  Reset = 'reset',\n  Rotate = 'rotate',\n  Start = 'start',\n  Stop = 'stop',\n  Tick = 'tick',\n};\n\nexport const initialState = {\n  board: Board.create(20, 10),\n  current: Tetromino.create(firstShape),\n  interval: 750,\n  level: 1,\n  next: Tetromino.create(secondShape),\n  position: Point.create(3, 0),\n  randomizer: randomizer,\n  score: 0,\n  state: StateTypes.Paused,\n}\n\nexport type State = typeof initialState;\n\nexport default function reducer(state: State, action: ActionTypes) {\n  switch (action) {\n    case ActionTypes.Tick:\n    case ActionTypes.MoveDown: {\n      const [board, current, next, position, randomizer] = Board.moveDown(\n        state.board,\n        state.current,\n        state.next,\n        state.position,\n        state.randomizer,\n      );\n\n      return {\n        ...state,\n        board,\n        current,\n        next,\n        position,\n        randomizer,\n      };\n     }\n    case ActionTypes.MoveLeft:\n      return {\n        ...state,\n        position: Board.moveLeft(state.board, state.current, state.position),\n      };\n    case ActionTypes.MoveRight:\n      return {\n        ...state,\n        position: Board.moveRight(state.board, state.current, state.position),\n      };\n    case ActionTypes.Rotate:\n      return {\n        ...state,\n        current: Board.rotate(state.board, state.current, state.position),\n      };\n    case ActionTypes.Start:\n      return {\n        ...state,\n        state: StateTypes.Playing,\n      };\n    case ActionTypes.Stop:\n      return {\n        ...state,\n        state: StateTypes.Paused,\n      };\n    default:\n      return state;\n  }\n}\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport { ActionTypes, State } from '../reducer';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: State,\n}\n\nexport default function Paused({ dispatch, state }: Props) {\n  const dispatchStart = useCallback(() => dispatch(ActionTypes.Start), [dispatch]);\n  useKeyHandler(' ', dispatchStart);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position}>\n        <span style={styles.text}>Paused</span>\n      </MainBoard>\n      <ScoreBoard level={state.level} next={state.next} score={state.score}>\n        <button onClick={dispatchStart}>Start</button>\n      </ScoreBoard>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n  text: {\n    backgroundColor: 'whitesmoke',\n    color: 'black',\n    display: 'block',\n    position: 'absolute' as 'absolute',\n    textAlign: 'center' as 'center',\n    top: '50%',\n    width: '100%',\n  },\n};\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport useInterval from '../hooks/useInterval';\nimport { ActionTypes, State } from '../reducer';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: State,\n}\n\nexport default function Playing({ dispatch, state }: Props) {\n  const dispatchRotate = useCallback(() => dispatch(ActionTypes.Rotate), [dispatch]);\n  const dispatchDown = useCallback(() => dispatch(ActionTypes.MoveDown), [dispatch]);\n  const dispatchLeft = useCallback(() => dispatch(ActionTypes.MoveLeft), [dispatch]);\n  const dispatchRight = useCallback(() => dispatch(ActionTypes.MoveRight), [dispatch]);\n  const dispatchStop = useCallback(() => dispatch(ActionTypes.Stop), [dispatch]);\n  const dispatchTick = useCallback(() => dispatch(ActionTypes.Tick), [dispatch]);\n\n  useKeyHandler('ArrowUp', dispatchRotate);\n  useKeyHandler('ArrowDown', dispatchDown);\n  useKeyHandler('ArrowLeft', dispatchLeft);\n  useKeyHandler('ArrowRight', dispatchRight);\n  useKeyHandler(' ', dispatchStop);\n  useInterval(state.interval, dispatchTick);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position} />\n      <ScoreBoard level={state.level} next={state.next} score={state.score}>\n        <button onClick={dispatchStop}>Pause</button>\n      </ScoreBoard>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n};\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(delay: number, callback: () => void) {\n  const savedCallback = useRef<Function>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay, callback]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n","import React, { useReducer } from 'react';\nimport Paused from './Paused';\nimport Playing from './Playing';\nimport reducer, { initialState, StateTypes } from '../reducer';\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  switch (state.state) {\n    case StateTypes.Paused:\n      return <Paused dispatch={dispatch} state={state} />\n    case StateTypes.Playing:\n      return <Playing dispatch={dispatch} state={state} />\n    default:\n      return null;\n  }\n}\n"],"sourceRoot":""}