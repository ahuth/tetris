{"version":3,"sources":["components/Block.tsx","utils/point.ts","utils/tetromino.ts","utils/game.ts","utils/randomizer.ts","utils/board.ts","components/Matrix.tsx","components/MainBoard.tsx","components/Preview.tsx","reducer.ts","components/ScoreBoard.tsx","hooks/useKeyHandler.ts","components/Lost.tsx","components/Playing.tsx","hooks/useInterval.ts","components/App.tsx","index.ts"],"names":["Block","_ref","color","styling","useMemo","backgroundColor","getStyling","react_default","a","createElement","style","create","x","y","ShapeType","ShapeOrientation","type","orientation","Up","getShape","tetromino","shapes","StateTypes","_shapes","Object","defineProperty","L","_ShapeType$L","Right","Down","Left","I","_ShapeType$I","T","_ShapeType$T","S","_ShapeType$S","Z","_ShapeType$Z","O","_ShapeType$O","J","_ShapeType$J","shuffle","keys","next","randomizer","_randomizer","toArray","head","tail","slice","length","_Randomizer$next","Randomizer","_Randomizer$next2","slicedToArray","firstShape","_Randomizer$next3","_Randomizer$next4","secondShape","board","Board","current","Tetromino","level","position","Point","score","state","Playing","moveDown","game","_Board$moveDown","linesRemoved","potentialPosition","isValid","isAtTop","Lost","nextBoard","commitTetrominoToBoard","_removeCompletedRows","isRemoving","numRows","columns","r","c","index","getBoardIndexFromPosition","getAtIndex","_nextBoard$fill","clone","beginningPosition","beginningIndex","fill","splice","emptyRow","Array","unshift","apply","toConsumableArray","removeCompletedRows","_removeCompletedRows2","linesCleared","nextShape","nextRandomizer","nextNext","nextPosition","nextScore","scoreRows","nextLevel","Math","floor","_Board$moveDown2","nextState","objectSpread","height","width","filled","value","shape","mappedBoard","setAtIndex","moveLeft","moveRight","rotate","potentialTetromino","n","maxColIndex","maxRowIndex","Matrix","colors","styles","borderBottom","display","gridTemplateColumns","concat","getStyles","boardWithTetromino","callback","map","i","key","MainBoard","children","container","0","1","2","Preview","ActionTypes","ScoreBoard","useKeyHandler","handler","useEffect","handleKeyDown","event","document","addEventListener","removeEventListener","reducer","action","Tick","MoveDown","Game","MoveLeft","MoveRight","Reset","Rotate","dispatch","dispatchReset","useCallback","text","onClick","textAlign","top","dispatchRotate","dispatchDown","dispatchLeft","dispatchRight","dispatchTick","delay","savedCallback","useRef","id","setInterval","clearInterval","useInterval","intervalFromLevel","initialState","ReactDOM","render","React","_useReducer","useReducer","_useReducer2","getElementById"],"mappings":"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","file":"static/js/main.5ac7a4df.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\ntype Props = {\n  color: string,\n}\n\nexport default function Block({ color }: Props) {\n  const styling = useMemo(() => getStyling(color), [color]);\n\n  return <div style={styling} />;\n}\n\nfunction getStyling(color: string) {\n  return {\n    backgroundColor: color,\n  };\n}\n","export type Type = Point;\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nexport function create(x: number, y: number): Point {\n  return { x, y };\n}\n","export type Type = Tetromino;\n\nexport enum ShapeType {\n  L = 'L',\n  I = 'I',\n  T = 'T',\n  S = 'S',\n  Z = 'Z',\n  O = 'O',\n  J = 'J',\n}\n\nexport enum ShapeOrientation {\n  Up,\n  Right,\n  Down,\n  Left,\n}\n\ninterface Tetromino {\n  type: ShapeType;\n  orientation: ShapeOrientation;\n}\n\n/**\n * Create a new Tetromino.\n */\nexport function create(type: ShapeType): Tetromino {\n  return {\n    type,\n    orientation: ShapeOrientation.Up,\n  };\n}\n\n/**\n * Get the current blocks for a piece and orientation.\n */\nexport function getShape(tetromino: Tetromino) {\n  return shapes[tetromino.type][tetromino.orientation];\n}\n\n/**\n * Rotate a Tetromino clockwise.\n */\nexport function rotate(tetromino: Tetromino): Tetromino {\n  return {\n    ...tetromino,\n    orientation: nextOrientation(tetromino.orientation),\n  };\n}\n\nfunction nextOrientation(n: number) {\n  return (n + 1) % 4;\n}\n\nconst shapes = {\n  [ShapeType.L]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.I]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  },\n\n  [ShapeType.T]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.S]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.Z]: {\n    [ShapeOrientation.Up]: [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  },\n\n  [ShapeType.O]: {\n    [ShapeOrientation.Up]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Right]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1],\n      [1, 1],\n    ],\n  },\n\n  [ShapeType.J]: {\n    [ShapeOrientation.Up]: [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  },\n};\n","import * as Board from './board';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\n\nexport enum StateTypes {\n  Playing,\n  Won,\n  Lost,\n};\n\ninterface Game {\n  board: Board.Type,\n  current: Tetromino.Type,\n  level: number,\n  next: Tetromino.Type,\n  position: Point.Type,\n  randomizer: Randomizer.Type,\n  score: number,\n  state: StateTypes,\n};\n\nexport type Type = Game;\n\nexport function create(): Game {\n  const [firstShape, firstRandomizer] = Randomizer.next(Randomizer.create());\n  const [secondShape, randomizer] = Randomizer.next(firstRandomizer);\n\n  return {\n    board: Board.create(20, 10),\n    current: Tetromino.create(firstShape),\n    level: 0,\n    next: Tetromino.create(secondShape),\n    position: Point.create(3, 0),\n    randomizer: randomizer,\n    score: 0,\n    state: StateTypes.Playing,\n  };\n}\n\nexport function moveDown(game: Game): Game {\n  const [board, current, level, next, position, randomizer, score, nextState] = Board.moveDown(\n    game.board,\n    game.current,\n    game.level,\n    game.next,\n    game.position,\n    game.randomizer,\n    game.score,\n    game.state,\n  );\n\n  return {\n    ...game,\n    board,\n    current,\n    level,\n    next,\n    position,\n    randomizer,\n    score,\n    state: nextState,\n  };\n}\n\nexport function moveLeft(game: Game): Game {\n  return {\n    ...game,\n    position: Board.moveLeft(game.board, game.current, game.position),\n  };\n}\n\nexport function moveRight(game: Game): Game {\n  return {\n    ...game,\n    position: Board.moveRight(game.board, game.current, game.position),\n  };\n}\n\nexport function rotate(game: Game): Game {\n  return {\n    ...game,\n    current: Board.rotate(game.board, game.current, game.position),\n  };\n}\n","import { shuffle } from 'lodash';\nimport { ShapeType } from './tetromino';\n\nexport type Type = Randomizer;\n\ntype Randomizer = ShapeType[];\n\n/**\n * Create a new randomizer object, which s passed in to the other methods in this module to get\n * random numbers.\n * @see http://tetris.wikia.com/wiki/Random_Generator.\n */\nexport function create(): Randomizer {\n  return shuffle(Object.keys(ShapeType) as ShapeType[]);\n}\n\n/**\n * Retrieve the next shape. Returns an array with a value and the next randomizer.\n *\n * Example:\n *\n *   [val, randomizer] = next(randomizer);\n *\n */\nexport function next(randomizer: Randomizer): [ShapeType, Randomizer] {\n  const [head, ...tail] = randomizer;\n\n  if (tail.length > 0) {\n    return [head, tail];\n  }\n\n  return [head, create()];\n}\n","import { fill } from 'lodash';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\nimport { StateTypes } from './game';\n\nexport type Type = Board;\n\ninterface Board {\n  columns: number;\n  fill: number[];\n  length: number;\n  linesCleared: number;\n}\n\n/**\n * Create a new board.\n */\nexport function create(height: number, width: number): Board {\n  const filled = fill(new Array(height * width), 0, 0);\n\n  return {\n    columns: width,\n    fill: filled,\n    length: filled.length,\n    linesCleared: 0,\n  };\n}\n\n/**\n * Add a tetromino to a board.\n */\nexport function commitTetrominoToBoard(\n  board: Board,\n  tetromino: Tetromino.Type,\n  position: Point.Type,\n  value: number,\n): Board {\n  const shape = Tetromino.getShape(tetromino);\n  const mappedBoard = clone(board);\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      setAtIndex(mappedBoard, index, value);\n    }\n  }\n\n  return mappedBoard;\n}\n\n/**\n * Move a tetromino down, if possible. If not possible, add the tetromino to the board and create a\n * new tetromino.\n */\nexport function moveDown(\n  board: Board,\n  current: Tetromino.Type,\n  level: number,\n  next: Tetromino.Type,\n  position: Point.Type,\n  randomizer: Randomizer.Type,\n  score: number,\n  state: StateTypes,\n): [Board, Tetromino.Type, number, Tetromino.Type, Point.Type, Randomizer.Type, number, StateTypes] {\n  const potentialPosition = Point.create(position.x, position.y + 1);\n\n  if (isValid(board, current, potentialPosition)) {\n    return [board, current, level, next, potentialPosition, randomizer, score, state];\n  }\n\n  if (isAtTop(position)) {\n    return [board, current, level, next, position, randomizer, score, StateTypes.Lost];\n  }\n\n  let linesRemoved;\n  let nextBoard = commitTetrominoToBoard(board, current, position, 1);\n  [nextBoard, linesRemoved] = removeCompletedRows(nextBoard);\n  nextBoard.linesCleared = nextBoard.linesCleared + linesRemoved;\n\n  const [nextShape, nextRandomizer] = Randomizer.next(randomizer);\n  const nextNext = Tetromino.create(nextShape);\n  const nextPosition = Point.create(3, 0);\n  const nextScore = score + scoreRows(linesRemoved, level);\n  const nextLevel = Math.floor(nextBoard.linesCleared / 10);\n\n  return [nextBoard, next, nextLevel, nextNext, nextPosition, nextRandomizer, nextScore, state];\n}\n\n/**\n * Move a tetromino left, if possible. Either way, return a position.\n */\nexport function moveLeft(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x - 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Move a tetromino right, if possible. Either way, return a position.\n */\nexport function moveRight(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x + 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Rotate a tetromino, if possible. Either way, return a tetromino.\n */\nexport function rotate(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialTetromino = Tetromino.rotate(tetromino);\n\n  if (isValid(board, potentialTetromino, position)) {\n    return potentialTetromino;\n  }\n\n  return tetromino;\n}\n\n/**\n * Determine if a tetromino at a certain position on the board is \"valid\". In other words, doesn't\n * overlap with any existing filled spots and is completely on the board.\n */\nfunction isValid(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const shape = Tetromino.getShape(tetromino);\n  const maxColIndex = board.columns - 1;\n  const maxRowIndex = (board.length / board.columns) - 1;\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      // If the horizontal position is off the board, it's not valid.\n      if (position.x + c < 0 || position.x + c > maxColIndex) { return false; }\n\n      // If the vertical position is off the board, it's not valid.\n      if (position.y + r < 0 || position.y + r > maxRowIndex) { return false }\n\n      // If this part of the shape is over a part of the board that's \"on\", it's not valid.\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      if (getAtIndex(board, index) === 1) { return false; }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Execute a callback for every location on a board, and return the resulting array.\n */\nexport function map(board: Board, callback: (x: number, index: number) => unknown) {\n  return board.fill.map(callback);\n}\n\n/**\n * Determine if a position is at the \"top\" of the screen.\n */\nexport function isAtTop(position: Point.Type) {\n  return position.y === 0;\n}\n\nfunction getBoardIndexFromPosition(board: Board, position: Point.Type) {\n  return position.x + (position.y * board.columns);\n}\n\nfunction clone(board: Board): Board {\n  return {\n    ...board,\n    fill: board.fill.slice(),\n  };\n}\n\nfunction getAtIndex(board: Board, index: number) {\n  return board.fill[index];\n}\n\nfunction setAtIndex(board: Board, index: number, value: number): void {\n  board.fill[index] = value;\n}\n\nfunction removeCompletedRows(board: Board): [Board, number] {\n  let linesRemoved = 0;\n  let nextBoard = board;\n  let isRemoving = false;\n  const numRows = board.length / board.columns;\n\n  for (let r = 0; r < numRows; r++) {\n    for (let c = 0; c < board.columns; c++) {\n      const position = Point.create(c, r);\n      const index = getBoardIndexFromPosition(board, position);\n\n      // If any part of this row is 0, stop and move on to the next row.\n      if (getAtIndex(board, index) === 0) {\n        break;\n      }\n\n      // If this is the last column in the row, the row must be completed.\n      if (c === board.columns - 1) {\n        linesRemoved = linesRemoved + 1;\n\n        // If we haven't created a new board, yet, do so.\n        if (!isRemoving) {\n          isRemoving = true;\n          nextBoard = clone(nextBoard);\n        }\n\n        // Remove the row from the board.\n        const beginningPosition = Point.create(0, r);\n        const beginningIndex = getBoardIndexFromPosition(board, beginningPosition);\n        nextBoard.fill.splice(beginningIndex, board.columns);\n\n        // Add an empty row to the top.\n        const emptyRow = fill(new Array(board.columns), 0, 0);\n        nextBoard.fill.unshift(...emptyRow);\n      }\n    }\n  }\n\n  return [nextBoard, linesRemoved];\n}\n\n/**\n * @see https://tetris.fandom.com/wiki/Scoring\n */\nfunction scoreRows(linesRemoved: number, level: number) {\n  switch (linesRemoved) {\n    case 0:\n      return 0;\n    case 1:\n      return 40 * (level + 1);\n    case 2:\n      return 100 * (level + 1);\n    case 3:\n      return 300 * (level + 1);\n    case 4:\n      return 1200 * (level + 1);\n    default:\n      // Should not be possible to reach this case, as the number of lines removed can only be\n      // between 0 and 4.\n      return 0;\n  }\n}\n","import React, { useMemo } from 'react';\nimport Block from './Block';\nimport * as Board from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board.Type,\n  colors: { [index: string]: string },\n  current: Tetromino,\n  height: number,\n  position: Point,\n  width: number,\n}\n\nexport default function Matrix({\n  board,\n  colors,\n  current,\n  height,\n  position,\n  width,\n}: Props) {\n  const styles = useMemo(() => getStyles(board.columns, height, width), [board.columns, height, width]);\n  const boardWithTetromino = Board.commitTetrominoToBoard(board, current, position, 2);\n\n  return (\n    <div style={styles}>\n      {Board.map(boardWithTetromino, (fill: number, i: number) => {\n        return <Block color={colors[fill]} key={`${i}-${fill}`} />\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns: number, height: number, width: number) {\n  return {\n    borderBottom: '1px solid grey',\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: height,\n    width: width,\n  };\n}\n","import React from 'react';\nimport Matrix from './Matrix';\nimport { Type as Board } from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board,\n  children?: React.ReactNode,\n  current: Tetromino,\n  position: Point,\n}\n\nexport default function MainBoard({ board, children, current, position }: Props) {\n  return (\n    <div style={styles.container}>\n      <Matrix\n        board={board}\n        colors={colors}\n        current={current}\n        height={400}\n        position={position}\n        width={200}\n      />\n      {children}\n    </div>\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'limegreen',\n};\n\nconst styles = {\n  container: {\n    position: 'relative' as const,\n  },\n};\n","import React from 'react';\nimport Matrix from './Matrix';\nimport * as Board from '../utils/board';\nimport * as Point from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\nconst board = Board.create(5, 5);\nconst position = Point.create(1, 1);\n\ntype Props = {\n  next: Tetromino,\n}\n\nexport default function Preview({ next }: Props) {\n  return (\n    <Matrix\n      board={board}\n      colors={colors}\n      current={next}\n      height={100}\n      position={position}\n      width={100}\n    />\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'yellow',\n};\n","import * as Game from './utils/game';\n\nexport enum ActionTypes {\n  MoveDown = 'down',\n  MoveLeft = 'left',\n  MoveRight = 'right',\n  Reset = 'reset',\n  Rotate = 'rotate',\n  Start = 'start',\n  Stop = 'stop',\n  Tick = 'tick',\n};\n\nexport default function reducer(state: Game.Type, action: ActionTypes) {\n  switch (action) {\n    case ActionTypes.Tick:\n    case ActionTypes.MoveDown:\n      return Game.moveDown(state);\n    case ActionTypes.MoveLeft:\n      return Game.moveLeft(state);\n    case ActionTypes.MoveRight:\n      return Game.moveRight(state);\n    case ActionTypes.Reset:\n      return Game.create();\n    case ActionTypes.Rotate:\n      return Game.rotate(state);\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport Preview from './Preview';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  children?: React.ReactNode,\n  level: number,\n  next: Tetromino,\n  score: number,\n}\n\nexport default function ScoreBoard({ children, level, next, score }: Props) {\n  return (\n    <div>\n      <Preview next={next} />\n      <div>Level: {level}</div>\n      <div>Score: {score}</div>\n      <div>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n\nexport default function useKeyHandler(key: string, handler: (event: KeyboardEvent) => void) {\n  useEffect(() => {\n    function handleKeyDown(event: KeyboardEvent) {\n      if (event.key === key) {\n        handler(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [key, handler]);\n}\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport { ActionTypes } from '../reducer';\nimport { Type as Game } from '../utils/game';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: Game,\n}\n\nexport default function Lost({ dispatch, state }: Props) {\n  const dispatchReset = useCallback(() => dispatch(ActionTypes.Reset), [dispatch]);\n  useKeyHandler(' ', dispatchReset);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position}>\n        <span style={styles.text}>You lost!</span>\n      </MainBoard>\n      <ScoreBoard level={state.level} next={state.next} score={state.score}>\n        <button onClick={dispatchReset}>Reset</button>\n      </ScoreBoard>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n  text: {\n    backgroundColor: 'whitesmoke',\n    color: 'black',\n    display: 'block',\n    position: 'absolute' as const,\n    textAlign: 'center' as const,\n    top: '50%',\n    width: '100%',\n  },\n};\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport useInterval from '../hooks/useInterval';\nimport { ActionTypes } from '../reducer';\nimport { Type as Game } from '../utils/game';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: Game,\n}\n\nexport default function Playing({ dispatch, state }: Props) {\n  const dispatchRotate = useCallback(() => dispatch(ActionTypes.Rotate), [dispatch]);\n  const dispatchDown = useCallback(() => dispatch(ActionTypes.MoveDown), [dispatch]);\n  const dispatchLeft = useCallback(() => dispatch(ActionTypes.MoveLeft), [dispatch]);\n  const dispatchRight = useCallback(() => dispatch(ActionTypes.MoveRight), [dispatch]);\n  const dispatchTick = useCallback(() => dispatch(ActionTypes.Tick), [dispatch]);\n\n  useKeyHandler('ArrowUp', dispatchRotate);\n  useKeyHandler('ArrowDown', dispatchDown);\n  useKeyHandler('ArrowLeft', dispatchLeft);\n  useKeyHandler('ArrowRight', dispatchRight);\n  useInterval(intervalFromLevel(state.level), dispatchTick);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position} />\n      <ScoreBoard level={state.level} next={state.next} score={state.score} />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n};\n\nfunction intervalFromLevel(level: number) {\n  switch (level) {\n    case 0: return 750;\n    case 1: return 650;\n    case 2: return 550;\n    case 3: return 450;\n    case 4: return 350;\n    case 5: return 250;\n    default: return 150;\n  }\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(delay: number, callback: () => void) {\n  const savedCallback = useRef<Function>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay, callback]);\n}\n","import React, { useReducer } from 'react';\nimport Lost from './Lost';\nimport Playing from './Playing';\nimport reducer from '../reducer';\nimport * as Game from '../utils/game';\n\nconst initialState = Game.create();\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  switch (state.state) {\n    case Game.StateTypes.Lost:\n      return <Lost dispatch={dispatch} state={state} />;\n    case Game.StateTypes.Playing:\n      return <Playing dispatch={dispatch} state={state} />\n    default:\n      return null;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n"],"sourceRoot":""}