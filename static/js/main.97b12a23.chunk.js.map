{"version":3,"sources":["components/Block.tsx","utils/point.ts","utils/tetromino.ts","reducer.ts","utils/randomizer.ts","utils/board.ts","components/Matrix.tsx","components/MainBoard.tsx","components/Preview.tsx","components/ScoreBoard.tsx","hooks/useKeyHandler.ts","components/Lost.tsx","components/Playing.tsx","hooks/useInterval.ts","index.ts","components/App.tsx"],"names":["Block","_ref","color","styling","useMemo","backgroundColor","getStyling","react_default","a","createElement","style","create","x","y","ShapeType","ShapeOrientation","type","orientation","Up","getShape","tetromino","shapes","StateTypes","ActionTypes","_shapes","Object","defineProperty","L","_ShapeType$L","Right","Down","Left","I","_ShapeType$I","T","_ShapeType$T","S","_ShapeType$S","Z","_ShapeType$Z","O","_ShapeType$O","J","_ShapeType$J","shuffle","keys","next","randomizer","_randomizer","toArray","head","tail","slice","length","createInitialState","_Randomizer$next","Randomizer","_Randomizer$next2","slicedToArray","firstShape","_Randomizer$next3","_Randomizer$next4","secondShape","board","Board","current","Tetromino","level","position","Point","score","state","Playing","initialState","reducer","action","Tick","MoveDown","_Board$moveDown","linesRemoved","potentialPosition","isValid","isAtTop","Lost","nextBoard","commitTetrominoToBoard","_removeCompletedRows","isRemoving","numRows","columns","r","c","index","getBoardIndexFromPosition","getAtIndex","_nextBoard$fill","clone","beginningPosition","beginningIndex","fill","splice","emptyRow","Array","unshift","apply","toConsumableArray","removeCompletedRows","_removeCompletedRows2","linesCleared","nextShape","nextRandomizer","nextNext","nextPosition","nextScore","scoreRows","nextLevel","Math","floor","_Board$moveDown2","nextState","objectSpread","MoveLeft","MoveRight","Reset","Rotate","Start","height","width","filled","value","shape","mappedBoard","setAtIndex","moveLeft","moveRight","rotate","potentialTetromino","n","maxColIndex","maxRowIndex","Matrix","colors","styles","borderBottom","display","gridTemplateColumns","concat","getStyles","boardWithTetromino","callback","map","i","key","MainBoard","children","container","0","1","2","Preview","ScoreBoard","useKeyHandler","handler","useEffect","handleKeyDown","event","document","addEventListener","removeEventListener","dispatch","dispatchReset","useCallback","text","onClick","textAlign","top","dispatchRotate","dispatchDown","dispatchLeft","dispatchRight","dispatchTick","delay","savedCallback","useRef","id","setInterval","clearInterval","useInterval","intervalFromLevel","ReactDOM","render","React","_useReducer","useReducer","_useReducer2","getElementById"],"mappings":"6MAMe,SAASA,EAATC,GAAiC,IAAhBC,EAAgBD,EAAhBC,MACxBC,EAAUC,kBAAQ,kBAK1B,SAAoBF,GAClB,MAAO,CACLG,gBAAiBH,GAPWI,CAAWJ,IAAQ,CAACA,IAElD,OAAOK,EAAAC,EAAAC,cAAA,OAAKC,MAAOP,8BCFd,SAASQ,EAAOC,EAAWC,GAChC,MAAO,CAAED,IAAGC,yBCNFC,EAUAC,iBAeL,SAASJ,EAAOK,GACrB,MAAO,CACLA,OACAC,YAAaF,EAAiBG,IAO3B,SAASC,EAASC,GACvB,OAAOC,EAAOD,EAAUJ,MAAMI,EAAUH,uBApC9BH,gFAUAC,yFA2CZ,IClDYO,EAMAC,ED4CNF,GAAMG,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EACTV,EAAUa,GADDC,EAAA,GAAAH,OAAAC,EAAA,EAAAD,CAAAG,EAEPb,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KALDO,OAAAC,EAAA,EAAAD,CAAAG,EAOPb,EAAiBc,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAVDJ,OAAAC,EAAA,EAAAD,CAAAG,EAYPb,EAAiBe,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAfDL,OAAAC,EAAA,EAAAD,CAAAG,EAiBPb,EAAiBgB,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApBDH,IAAAH,OAAAC,EAAA,EAAAD,CAAAD,EAwBTV,EAAUkB,GAxBDC,EAAA,GAAAR,OAAAC,EAAA,EAAAD,CAAAQ,EAyBPlB,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KA7BJO,OAAAC,EAAA,EAAAD,CAAAQ,EA+BPlB,EAAiBc,MAAQ,CACxB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAnCJJ,OAAAC,EAAA,EAAAD,CAAAQ,EAqCPlB,EAAiBe,KAAO,CACvB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAzCJL,OAAAC,EAAA,EAAAD,CAAAQ,EA2CPlB,EAAiBgB,KAAO,CACvB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KA/CJE,IAAAR,OAAAC,EAAA,EAAAD,CAAAD,EAmDTV,EAAUoB,GAnDDC,EAAA,GAAAV,OAAAC,EAAA,EAAAD,CAAAU,EAoDPpB,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAvDDO,OAAAC,EAAA,EAAAD,CAAAU,EAyDPpB,EAAiBc,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA5DDJ,OAAAC,EAAA,EAAAD,CAAAU,EA8DPpB,EAAiBe,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAjEDL,OAAAC,EAAA,EAAAD,CAAAU,EAmEPpB,EAAiBgB,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAtEDI,IAAAV,OAAAC,EAAA,EAAAD,CAAAD,EA0ETV,EAAUsB,GA1EDC,EAAA,GAAAZ,OAAAC,EAAA,EAAAD,CAAAY,EA2EPtB,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA9EDO,OAAAC,EAAA,EAAAD,CAAAY,EAgFPtB,EAAiBc,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAnFDJ,OAAAC,EAAA,EAAAD,CAAAY,EAqFPtB,EAAiBe,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAxFDL,OAAAC,EAAA,EAAAD,CAAAY,EA0FPtB,EAAiBgB,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA7FDM,IAAAZ,OAAAC,EAAA,EAAAD,CAAAD,EAiGTV,EAAUwB,GAjGDC,EAAA,GAAAd,OAAAC,EAAA,EAAAD,CAAAc,EAkGPxB,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KArGDO,OAAAC,EAAA,EAAAD,CAAAc,EAuGPxB,EAAiBc,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA1GDJ,OAAAC,EAAA,EAAAD,CAAAc,EA4GPxB,EAAiBe,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA/GDL,OAAAC,EAAA,EAAAD,CAAAc,EAiHPxB,EAAiBgB,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApHDQ,IAAAd,OAAAC,EAAA,EAAAD,CAAAD,EAwHTV,EAAU0B,GAxHDC,EAAA,GAAAhB,OAAAC,EAAA,EAAAD,CAAAgB,EAyHP1B,EAAiBG,GAAK,CACrB,CAAC,EAAG,GACJ,CAAC,EAAG,KA3HEO,OAAAC,EAAA,EAAAD,CAAAgB,EA6HP1B,EAAiBc,MAAQ,CACxB,CAAC,EAAG,GACJ,CAAC,EAAG,KA/HEJ,OAAAC,EAAA,EAAAD,CAAAgB,EAiIP1B,EAAiBe,KAAO,CACvB,CAAC,EAAG,GACJ,CAAC,EAAG,KAnIEL,OAAAC,EAAA,EAAAD,CAAAgB,EAqIP1B,EAAiBgB,KAAO,CACvB,CAAC,EAAG,GACJ,CAAC,EAAG,KAvIEU,IAAAhB,OAAAC,EAAA,EAAAD,CAAAD,EA2ITV,EAAU4B,GA3IDC,EAAA,GAAAlB,OAAAC,EAAA,EAAAD,CAAAkB,EA4IP5B,EAAiBG,GAAK,CACrB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA/IDO,OAAAC,EAAA,EAAAD,CAAAkB,EAiJP5B,EAAiBc,MAAQ,CACxB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KApJDJ,OAAAC,EAAA,EAAAD,CAAAkB,EAsJP5B,EAAiBe,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAzJDL,OAAAC,EAAA,EAAAD,CAAAkB,EA2JP5B,EAAiBgB,KAAO,CACvB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KA9JDY,IAAAnB,GE3CL,SAASb,IACd,OAAOiC,kBAAQnB,OAAOoB,KAAK/B,IAWtB,SAASgC,EAAKC,GAAiD,IAAAC,EAAAvB,OAAAwB,EAAA,EAAAxB,CAC5CsB,GAAjBG,EAD6DF,EAAA,GACpDG,EADoDH,EAAAI,MAAA,GAGpE,OAAID,EAAKE,OAAS,EACT,CAACH,EAAMC,GAGT,CAACD,EAAMvC,KDThB,SAAS2C,IAAqB,IAAAC,EACUC,EAAgBA,KAD1BC,EAAAhC,OAAAiC,EAAA,EAAAjC,CAAA8B,EAAA,GACrBI,EADqBF,EAAA,GAAAG,EAEMJ,EAFNC,EAAA,IAAAI,EAAApC,OAAAiC,EAAA,EAAAjC,CAAAmC,EAAA,GAErBE,EAFqBD,EAAA,GAERd,EAFQc,EAAA,GAI5B,MAAO,CACLE,MAAOC,EAAa,GAAI,IACxBC,QAASC,EAAiBP,GAC1BQ,MAAO,EACPrB,KAAMoB,EAAiBJ,GACvBM,SAAUC,EAAa,EAAG,GAC1BtB,WAAYA,EACZuB,MAAO,EACPC,MAAOjD,EAAWkD,mBA7BVlD,qFAMAC,qJA2BL,IAAMkD,EAAenB,IAIb,SAASoB,EAAQH,EAAcI,GAC5C,OAAQA,GACN,KAAKpD,EAAYqD,KACjB,KAAKrD,EAAYsD,SAAU,IAAAC,EEaxB,SACLf,EACAE,EACAE,EACArB,EACAsB,EACArB,EACAuB,EACAC,GAEA,IAUIQ,EAVEC,EAAoBX,EAAaD,EAASxD,EAAGwD,EAASvD,EAAI,GAEhE,GAAIoE,EAAQlB,EAAOE,EAASe,GAC1B,MAAO,CAACjB,EAAOE,EAASE,EAAOrB,EAAMkC,EAAmBjC,EAAYuB,EAAOC,GAG7E,GAgGK,SAAiBH,GACtB,OAAsB,IAAfA,EAASvD,EAjGZqE,CAAQd,GACV,MAAO,CAACL,EAAOE,EAASE,EAAOrB,EAAMsB,EAAUrB,EAAYuB,EAAOhD,EAAW6D,MAI/E,IAAIC,EAAYC,EAAuBtB,EAAOE,EAASG,EAAU,GAZiCkB,EA8HpG,SAA6BvB,GAM3B,IALA,IAAIgB,EAAe,EACfK,EAAYrB,EACZwB,GAAa,EACXC,EAAUzB,EAAMV,OAASU,EAAM0B,QAE5BC,EAAI,EAAGA,EAAIF,EAASE,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAI5B,EAAM0B,QAASE,IAAK,CACtC,IAAMvB,EAAWC,EAAasB,EAAGD,GAC3BE,EAAQC,EAA0B9B,EAAOK,GAG/C,GAAiC,IAA7B0B,EAAW/B,EAAO6B,GACpB,MAIF,GAAID,IAAM5B,EAAM0B,QAAU,EAAG,KAAAM,EAC3BhB,GAA8B,EAGzBQ,IACHA,GAAa,EACbH,EAAYY,EAAMZ,IAIpB,IAAMa,EAAoB5B,EAAa,EAAGqB,GACpCQ,EAAiBL,EAA0B9B,EAAOkC,GACxDb,EAAUe,KAAKC,OAAOF,EAAgBnC,EAAM0B,SAG5C,IAAMY,EAAWF,eAAK,IAAIG,MAAMvC,EAAM0B,SAAU,EAAG,IACnDM,EAAAX,EAAUe,MAAKI,QAAfC,MAAAT,EAAAtE,OAAAgF,EAAA,EAAAhF,CAA0B4E,KAKhC,MAAO,CAACjB,EAAWL,GAvJS2B,CAAoBtB,GAbkDuB,EAAAlF,OAAAiC,EAAA,EAAAjC,CAAA6D,EAAA,GAajGF,EAbiGuB,EAAA,GAatF5B,EAbsF4B,EAAA,GAclGvB,EAAUwB,aAAexB,EAAUwB,aAAe7B,EAdgD,IAAAxB,EAgB9DC,EAAgBT,GAhB8CU,EAAAhC,OAAAiC,EAAA,EAAAjC,CAAA8B,EAAA,GAgB3FsD,EAhB2FpD,EAAA,GAgBhFqD,EAhBgFrD,EAAA,GAiB5FsD,EAAW7C,EAAiB2C,GAC5BG,EAAe3C,EAAa,EAAG,GAC/B4C,EAAY3C,EAuJpB,SAAmBS,EAAsBZ,GACvC,OAAQY,GACN,KAAK,EACH,OAAO,EACT,KAAK,EACH,OAAO,IAAMZ,EAAQ,GACvB,KAAK,EACH,OAAO,KAAOA,EAAQ,GACxB,KAAK,EACH,OAAO,KAAOA,EAAQ,GACxB,KAAK,EACH,OAAO,MAAQA,EAAQ,GACzB,QAGE,OAAO,GAtKe+C,CAAUnC,EAAcZ,GAC5CgD,EAAYC,KAAKC,MAAMjC,EAAUwB,aAAe,IAEtD,MAAO,CAACxB,EAAWtC,EAAMqE,EAAWJ,EAAUC,EAAcF,EAAgBG,EAAW1C,GF3CLP,CAC5EO,EAAMR,MACNQ,EAAMN,QACNM,EAAMJ,MACNI,EAAMzB,KACNyB,EAAMH,SACNG,EAAMxB,WACNwB,EAAMD,MACNC,EAAMA,OATiB+C,EAAA7F,OAAAiC,EAAA,EAAAjC,CAAAqD,EAAA,GAClBf,EADkBuD,EAAA,GACXrD,EADWqD,EAAA,GACFnD,EADEmD,EAAA,GACKxE,EADLwE,EAAA,GACWlD,EADXkD,EAAA,GACqBvE,EADrBuE,EAAA,GACiChD,EADjCgD,EAAA,GACwCC,EADxCD,EAAA,GAYzB,OAAO7F,OAAA+F,EAAA,EAAA/F,CAAA,GACF8C,EADL,CAEER,QACAE,UACAE,QACArB,OACAsB,WACArB,aACAuB,QACAC,MAAOgD,IAGX,KAAKhG,EAAYkG,SACf,OAAOhG,OAAA+F,EAAA,EAAA/F,CAAA,GACF8C,EADL,CAEEH,SAAUJ,EAAeO,EAAMR,MAAOQ,EAAMN,QAASM,EAAMH,YAE/D,KAAK7C,EAAYmG,UACf,OAAOjG,OAAA+F,EAAA,EAAA/F,CAAA,GACF8C,EADL,CAEEH,SAAUJ,EAAgBO,EAAMR,MAAOQ,EAAMN,QAASM,EAAMH,YAEhE,KAAK7C,EAAYoG,MACf,OAAOrE,IACT,KAAK/B,EAAYqG,OACf,OAAOnG,OAAA+F,EAAA,EAAA/F,CAAA,GACF8C,EADL,CAEEN,QAASD,EAAaO,EAAMR,MAAOQ,EAAMN,QAASM,EAAMH,YAE5D,KAAK7C,EAAYsG,MACf,OAAOpG,OAAA+F,EAAA,EAAA/F,CAAA,GACF8C,EADL,CAEEA,MAAOjD,EAAWkD,UAEtB,QACE,OAAOD,GE1EN,SAAS5D,EAAOmH,EAAgBC,GACrC,IAAMC,EAAS7B,eAAK,IAAIG,MAAMwB,EAASC,GAAQ,EAAG,GAElD,MAAO,CACLtC,QAASsC,EACT5B,KAAM6B,EACN3E,OAAQ2E,EAAO3E,OACfuD,aAAc,GAOX,SAASvB,EACdtB,EACA3C,EACAgD,EACA6D,GAKA,IAHA,IAAMC,EAAQhE,EAAmB9C,GAC3B+G,EAAcnC,EAAMjC,GAEjB2B,EAAI,EAAGA,EAAIwC,EAAM7E,OAAQqC,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIuC,EAAMxC,GAAGrC,OAAQsC,IAAK,CAExC,GAAoB,IAAhBuC,EAAMxC,GAAGC,GAGbyC,EAAWD,EADGtC,EAA0B9B,EAAOM,EAAaD,EAASxD,EAAI+E,EAAGvB,EAASvD,EAAI6E,IAC1DuC,GAInC,OAAOE,EA4CF,SAASE,EAAStE,EAAc3C,EAA2BgD,GAChE,IAAMY,EAAoBX,EAAaD,EAASxD,EAAI,EAAGwD,EAASvD,GAEhE,OAAIoE,EAAQlB,EAAO3C,EAAW4D,GACrBA,EAGFZ,EAMF,SAASkE,EAAUvE,EAAc3C,EAA2BgD,GACjE,IAAMY,EAAoBX,EAAaD,EAASxD,EAAI,EAAGwD,EAASvD,GAEhE,OAAIoE,EAAQlB,EAAO3C,EAAW4D,GACrBA,EAGFZ,EAMF,SAASmE,EAAOxE,EAAc3C,EAA2BgD,GAC9D,IAAMoE,EH9ED,SAAgBpH,GACrB,OAAOK,OAAA+F,EAAA,EAAA/F,CAAA,GACFL,EADL,CAEEH,aAIqBwH,EAJQrH,EAAUH,aAKjCwH,EAAI,GAAK,KADnB,IAAyBA,EGuEIvE,CAAiB9C,GAE5C,OAAI6D,EAAQlB,EAAOyE,EAAoBpE,GAC9BoE,EAGFpH,EAOT,SAAS6D,EAAQlB,EAAc3C,EAA2BgD,GAKxD,IAJA,IAAM8D,EAAQhE,EAAmB9C,GAC3BsH,EAAc3E,EAAM0B,QAAU,EAC9BkD,EAAe5E,EAAMV,OAASU,EAAM0B,QAAW,EAE5CC,EAAI,EAAGA,EAAIwC,EAAM7E,OAAQqC,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIuC,EAAMxC,GAAGrC,OAAQsC,IAEnC,GAAoB,IAAhBuC,EAAMxC,GAAGC,GAAb,CAGA,GAAIvB,EAASxD,EAAI+E,EAAI,GAAKvB,EAASxD,EAAI+E,EAAI+C,EAAe,OAAO,EAGjE,GAAItE,EAASvD,EAAI6E,EAAI,GAAKtB,EAASvD,EAAI6E,EAAIiD,EAAe,OAAO,EAIjE,GAAiC,IAA7B7C,EAAW/B,EADD8B,EAA0B9B,EAAOM,EAAaD,EAASxD,EAAI+E,EAAGvB,EAASvD,EAAI6E,KACnD,OAAO,EAIjD,OAAO,EAiBT,SAASG,EAA0B9B,EAAcK,GAC/C,OAAOA,EAASxD,EAAKwD,EAASvD,EAAIkD,EAAM0B,QAG1C,SAASO,EAAMjC,GACb,OAAOtC,OAAA+F,EAAA,EAAA/F,CAAA,GACFsC,EADL,CAEEoC,KAAMpC,EAAMoC,KAAK/C,UAIrB,SAAS0C,EAAW/B,EAAc6B,GAChC,OAAO7B,EAAMoC,KAAKP,GAGpB,SAASwC,EAAWrE,EAAc6B,EAAeqC,GAC/ClE,EAAMoC,KAAKP,GAASqC,EC/KP,SAASW,EAAT3I,GAOL,IANR8D,EAMQ9D,EANR8D,MACA8E,EAKQ5I,EALR4I,OACA5E,EAIQhE,EAJRgE,QACA6D,EAGQ7H,EAHR6H,OACA1D,EAEQnE,EAFRmE,SACA2D,EACQ9H,EADR8H,MAEMe,EAAS1I,kBAAQ,kBAYzB,SAAmBqF,EAAiBqC,EAAgBC,GAClD,MAAO,CACLgB,aAAc,iBACdC,QAAS,OACTC,oBAAmB,UAAAC,OAAYzD,EAAZ,UACnBqC,OAAQA,EACRC,MAAOA,GAlBoBoB,CAAUpF,EAAM0B,QAASqC,EAAQC,IAAQ,CAAChE,EAAM0B,QAASqC,EAAQC,IACxFqB,EAAqBpF,EAA6BD,EAAOE,EAASG,EAAU,GAElF,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,MAAOoI,GDwIT,SAAa/E,EAAcsF,GAChC,OAAOtF,EAAMoC,KAAKmD,IAAID,GCxIjBrF,CAAUoF,EAAoB,SAACjD,EAAcoD,GAC5C,OAAOhJ,EAAAC,EAAAC,cAACT,EAAD,CAAOE,MAAO2I,EAAO1C,GAAOqD,IAAG,GAAAN,OAAKK,EAAL,KAAAL,OAAU/C,QChBzC,SAASsD,EAATxJ,GAAkE,IAA7C8D,EAA6C9D,EAA7C8D,MAAO2F,EAAsCzJ,EAAtCyJ,SAAUzF,EAA4BhE,EAA5BgE,QAASG,EAAmBnE,EAAnBmE,SAC5D,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,MAAOoI,EAAOa,WACjBpJ,EAAAC,EAAAC,cAACmI,EAAD,CACE7E,MAAOA,EACP8E,OAAQA,EACR5E,QAASA,EACT6D,OAAQ,IACR1D,SAAUA,EACV2D,MAAO,MAER2B,GAKP,IAAMb,EAAS,CACbe,EAAG,QACHC,EAAG,aACHC,EAAG,aAGChB,EAAS,CACba,UAAW,CACTvF,SAAU,aC/BRL,EAAQC,EAAa,EAAG,GACxBI,EAAWC,EAAa,EAAG,GAMlB,SAAS0F,EAAT9J,GAAkC,IAAf6C,EAAe7C,EAAf6C,KAChC,OACEvC,EAAAC,EAAAC,cAACmI,EAAD,CACE7E,MAAOA,EACP8E,OAAQA,EACR5E,QAASnB,EACTgF,OAAQ,IACR1D,SAAUA,EACV2D,MAAO,MAKb,IAAMc,EAAS,CACbe,EAAG,QACHC,EAAG,aACHC,EAAG,UClBU,SAASE,EAAT/J,GAA6D,IAAvCyJ,EAAuCzJ,EAAvCyJ,SAAUvF,EAA6BlE,EAA7BkE,MAAOrB,EAAsB7C,EAAtB6C,KAAMwB,EAAgBrE,EAAhBqE,MAC1D,OACE/D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsJ,EAAD,CAASjH,KAAMA,IACfvC,EAAAC,EAAAC,cAAA,qBAAa0D,GACb5D,EAAAC,EAAAC,cAAA,qBAAa6D,GACb/D,EAAAC,EAAAC,cAAA,WACGiJ,IChBM,SAASO,GAAcT,EAAaU,GACjDC,oBAAU,WACR,SAASC,EAAcC,GACjBA,EAAMb,MAAQA,GAChBU,EAAQG,GAMZ,OAFAC,SAASC,iBAAiB,UAAWH,GAE9B,kBAAME,SAASE,oBAAoB,UAAWJ,KACpD,CAACZ,EAAKU,ICFI,SAAS/E,GAATlF,GAA0C,IAA1BwK,EAA0BxK,EAA1BwK,SAAUlG,EAAgBtE,EAAhBsE,MACjCmG,EAAgBC,sBAAY,kBAAMF,EAASlJ,EAAYoG,QAAQ,CAAC8C,IAGtE,OAFAR,GAAc,IAAKS,GAGjBnK,EAAAC,EAAAC,cAAA,OAAKC,MAAOoI,GAAOa,WACjBpJ,EAAAC,EAAAC,cAACgJ,EAAD,CAAW1F,MAAOQ,EAAMR,MAAOE,QAASM,EAAMN,QAASG,SAAUG,EAAMH,UACrE7D,EAAAC,EAAAC,cAAA,QAAMC,MAAOoI,GAAO8B,MAApB,cAEFrK,EAAAC,EAAAC,cAACuJ,EAAD,CAAY7F,MAAOI,EAAMJ,MAAOrB,KAAMyB,EAAMzB,KAAMwB,MAAOC,EAAMD,OAC7D/D,EAAAC,EAAAC,cAAA,UAAQoK,QAASH,GAAjB,WAMR,IAAM5B,GAAS,CACba,UAAW,CACTX,QAAS,QAEX4B,KAAM,CACJvK,gBAAiB,aACjBH,MAAO,QACP8I,QAAS,QACT5E,SAAU,WACV0G,UAAW,SACXC,IAAK,MACLhD,MAAO,SC1BI,SAASvD,GAATvE,GAA6C,IAA1BwK,EAA0BxK,EAA1BwK,SAAUlG,EAAgBtE,EAAhBsE,MACpCyG,EAAiBL,sBAAY,kBAAMF,EAASlJ,EAAYqG,SAAS,CAAC6C,IAClEQ,EAAeN,sBAAY,kBAAMF,EAASlJ,EAAYsD,WAAW,CAAC4F,IAClES,EAAeP,sBAAY,kBAAMF,EAASlJ,EAAYkG,WAAW,CAACgD,IAClEU,EAAgBR,sBAAY,kBAAMF,EAASlJ,EAAYmG,YAAY,CAAC+C,IACpEW,EAAeT,sBAAY,kBAAMF,EAASlJ,EAAYqD,OAAO,CAAC6F,IAQpE,OANAR,GAAc,UAAWe,GACzBf,GAAc,YAAagB,GAC3BhB,GAAc,YAAaiB,GAC3BjB,GAAc,aAAckB,GCpBf,SAAqBE,EAAehC,GACjD,IAAMiC,EAAgBC,mBAEtBpB,oBAAU,WACRmB,EAAcrH,QAAUoF,GACvB,CAACA,IAEJc,oBAAU,WAKR,IAAIqB,EAAKC,YAJT,WACEH,EAAcrH,SAAWqH,EAAcrH,WAGdoH,GAC3B,OAAO,kBAAMK,cAAcF,KAC1B,CAACH,EAAOhC,IDOXsC,CAgBF,SAA2BxH,GACzB,OAAQA,GACN,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,KAAK,EAAG,OAAO,IACf,QAAS,OAAO,KAxBNyH,CAAkBrH,EAAMJ,OAAQiH,GAG1C7K,EAAAC,EAAAC,cAAA,OAAKC,MAAOoI,GAAOa,WACjBpJ,EAAAC,EAAAC,cAACgJ,EAAD,CAAW1F,MAAOQ,EAAMR,MAAOE,QAASM,EAAMN,QAASG,SAAUG,EAAMH,WACvE7D,EAAAC,EAAAC,cAACuJ,EAAD,CAAY7F,MAAOI,EAAMJ,MAAOrB,KAAMyB,EAAMzB,KAAMwB,MAAOC,EAAMD,SAKrE,IAAMwE,GAAS,CACba,UAAW,CACTX,QAAS,SE9Bb6C,IAASC,OAAOC,IAAMtL,cCAP,WAAe,IAAAuL,EACFC,qBAAWvH,EAASD,GADlByH,EAAAzK,OAAAiC,EAAA,EAAAjC,CAAAuK,EAAA,GACrBzH,EADqB2H,EAAA,GACdzB,EADcyB,EAAA,GAG5B,OAAQ3H,EAAMA,OACZ,KAAKjD,EAAW6D,KACd,OAAO5E,EAAAC,EAAAC,cAAC0E,GAAD,CAAMsF,SAAUA,EAAUlG,MAAOA,IAC1C,KAAKjD,EAAWkD,QACd,OAAOjE,EAAAC,EAAAC,cAAC+D,GAAD,CAASiG,SAAUA,EAAUlG,MAAOA,IAC7C,QACE,OAAO,QDT6B+F,SAAS6B,eAAe","file":"static/js/main.97b12a23.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\ntype Props = {\n  color: string,\n}\n\nexport default function Block({ color }: Props) {\n  const styling = useMemo(() => getStyling(color), [color]);\n\n  return <div style={styling} />;\n}\n\nfunction getStyling(color: string) {\n  return {\n    backgroundColor: color,\n  };\n}\n","export type Type = Point;\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nexport function create(x: number, y: number): Point {\n  return { x, y };\n}\n","export type Type = Tetromino;\n\nexport enum ShapeType {\n  L = 'L',\n  I = 'I',\n  T = 'T',\n  S = 'S',\n  Z = 'Z',\n  O = 'O',\n  J = 'J',\n}\n\nexport enum ShapeOrientation {\n  Up,\n  Right,\n  Down,\n  Left,\n}\n\ninterface Tetromino {\n  type: ShapeType;\n  orientation: ShapeOrientation;\n}\n\n/**\n * Create a new Tetromino.\n */\nexport function create(type: ShapeType): Tetromino {\n  return {\n    type,\n    orientation: ShapeOrientation.Up,\n  };\n}\n\n/**\n * Get the current blocks for a piece and orientation.\n */\nexport function getShape(tetromino: Tetromino) {\n  return shapes[tetromino.type][tetromino.orientation];\n}\n\n/**\n * Rotate a Tetromino clockwise.\n */\nexport function rotate(tetromino: Tetromino): Tetromino {\n  return {\n    ...tetromino,\n    orientation: nextOrientation(tetromino.orientation),\n  };\n}\n\nfunction nextOrientation(n: number) {\n  return (n + 1) % 4;\n}\n\nconst shapes = {\n  [ShapeType.L]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.I]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  },\n\n  [ShapeType.T]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.S]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.Z]: {\n    [ShapeOrientation.Up]: [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  },\n\n  [ShapeType.O]: {\n    [ShapeOrientation.Up]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Right]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1],\n      [1, 1],\n    ],\n  },\n\n  [ShapeType.J]: {\n    [ShapeOrientation.Up]: [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  },\n};\n","import * as Board from './utils/board';\nimport * as Point from './utils/point';\nimport * as Randomizer from './utils/randomizer';\nimport * as Tetromino from './utils/tetromino';\n\nexport enum StateTypes {\n  Playing,\n  Won,\n  Lost,\n};\n\nexport enum ActionTypes {\n  MoveDown = 'down',\n  MoveLeft = 'left',\n  MoveRight = 'right',\n  Reset = 'reset',\n  Rotate = 'rotate',\n  Start = 'start',\n  Stop = 'stop',\n  Tick = 'tick',\n};\n\nfunction createInitialState() {\n  const [firstShape, firstRandomizer] = Randomizer.next(Randomizer.create());\n  const [secondShape, randomizer] = Randomizer.next(firstRandomizer);\n\n  return {\n    board: Board.create(20, 10),\n    current: Tetromino.create(firstShape),\n    level: 0,\n    next: Tetromino.create(secondShape),\n    position: Point.create(3, 0),\n    randomizer: randomizer,\n    score: 0,\n    state: StateTypes.Playing,\n  };\n}\n\nexport const initialState = createInitialState();\n\nexport type State = typeof initialState;\n\nexport default function reducer(state: State, action: ActionTypes) {\n  switch (action) {\n    case ActionTypes.Tick:\n    case ActionTypes.MoveDown: {\n      const [board, current, level, next, position, randomizer, score, nextState] = Board.moveDown(\n        state.board,\n        state.current,\n        state.level,\n        state.next,\n        state.position,\n        state.randomizer,\n        state.score,\n        state.state,\n      );\n\n      return {\n        ...state,\n        board,\n        current,\n        level,\n        next,\n        position,\n        randomizer,\n        score,\n        state: nextState,\n      };\n     }\n    case ActionTypes.MoveLeft:\n      return {\n        ...state,\n        position: Board.moveLeft(state.board, state.current, state.position),\n      };\n    case ActionTypes.MoveRight:\n      return {\n        ...state,\n        position: Board.moveRight(state.board, state.current, state.position),\n      };\n    case ActionTypes.Reset:\n      return createInitialState();\n    case ActionTypes.Rotate:\n      return {\n        ...state,\n        current: Board.rotate(state.board, state.current, state.position),\n      };\n    case ActionTypes.Start:\n      return {\n        ...state,\n        state: StateTypes.Playing,\n      };\n    default:\n      return state;\n  }\n}\n","import { shuffle } from 'lodash';\nimport { ShapeType } from './tetromino';\n\nexport type Type = Randomizer;\n\ntype Randomizer = ShapeType[];\n\n/**\n * Create a new randomizer object, which s passed in to the other methods in this module to get\n * random numbers.\n * @see http://tetris.wikia.com/wiki/Random_Generator.\n */\nexport function create(): Randomizer {\n  return shuffle(Object.keys(ShapeType) as ShapeType[]);\n}\n\n/**\n * Retrieve the next shape. Returns an array with a value and the next randomizer.\n *\n * Example:\n *\n *   [val, randomizer] = next(randomizer);\n *\n */\nexport function next(randomizer: Randomizer): [ShapeType, Randomizer] {\n  const [head, ...tail] = randomizer;\n\n  if (tail.length > 0) {\n    return [head, tail];\n  }\n\n  return [head, create()];\n}\n","import { fill } from 'lodash';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\nimport { StateTypes } from '../reducer';\n\nexport type Type = Board;\n\ninterface Board {\n  columns: number;\n  fill: number[];\n  length: number;\n  linesCleared: number;\n}\n\n/**\n * Create a new board.\n */\nexport function create(height: number, width: number): Board {\n  const filled = fill(new Array(height * width), 0, 0);\n\n  return {\n    columns: width,\n    fill: filled,\n    length: filled.length,\n    linesCleared: 0,\n  };\n}\n\n/**\n * Add a tetromino to a board.\n */\nexport function commitTetrominoToBoard(\n  board: Board,\n  tetromino: Tetromino.Type,\n  position: Point.Type,\n  value: number,\n): Board {\n  const shape = Tetromino.getShape(tetromino);\n  const mappedBoard = clone(board);\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      setAtIndex(mappedBoard, index, value);\n    }\n  }\n\n  return mappedBoard;\n}\n\n/**\n * Move a tetromino down, if possible. If not possible, add the tetromino to the board and create a\n * new tetromino.\n */\nexport function moveDown(\n  board: Board,\n  current: Tetromino.Type,\n  level: number,\n  next: Tetromino.Type,\n  position: Point.Type,\n  randomizer: Randomizer.Type,\n  score: number,\n  state: StateTypes,\n): [Board, Tetromino.Type, number, Tetromino.Type, Point.Type, Randomizer.Type, number, StateTypes] {\n  const potentialPosition = Point.create(position.x, position.y + 1);\n\n  if (isValid(board, current, potentialPosition)) {\n    return [board, current, level, next, potentialPosition, randomizer, score, state];\n  }\n\n  if (isAtTop(position)) {\n    return [board, current, level, next, position, randomizer, score, StateTypes.Lost];\n  }\n\n  let linesRemoved;\n  let nextBoard = commitTetrominoToBoard(board, current, position, 1);\n  [nextBoard, linesRemoved] = removeCompletedRows(nextBoard);\n  nextBoard.linesCleared = nextBoard.linesCleared + linesRemoved;\n\n  const [nextShape, nextRandomizer] = Randomizer.next(randomizer);\n  const nextNext = Tetromino.create(nextShape);\n  const nextPosition = Point.create(3, 0);\n  const nextScore = score + scoreRows(linesRemoved, level);\n  const nextLevel = Math.floor(nextBoard.linesCleared / 10);\n\n  return [nextBoard, next, nextLevel, nextNext, nextPosition, nextRandomizer, nextScore, state];\n}\n\n/**\n * Move a tetromino left, if possible. Either way, return a position.\n */\nexport function moveLeft(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x - 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Move a tetromino right, if possible. Either way, return a position.\n */\nexport function moveRight(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x + 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Rotate a tetromino, if possible. Either way, return a tetromino.\n */\nexport function rotate(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialTetromino = Tetromino.rotate(tetromino);\n\n  if (isValid(board, potentialTetromino, position)) {\n    return potentialTetromino;\n  }\n\n  return tetromino;\n}\n\n/**\n * Determine if a tetromino at a certain position on the board is \"valid\". In other words, doesn't\n * overlap with any existing filled spots and is completely on the board.\n */\nfunction isValid(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const shape = Tetromino.getShape(tetromino);\n  const maxColIndex = board.columns - 1;\n  const maxRowIndex = (board.length / board.columns) - 1;\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      // If the horizontal position is off the board, it's not valid.\n      if (position.x + c < 0 || position.x + c > maxColIndex) { return false; }\n\n      // If the vertical position is off the board, it's not valid.\n      if (position.y + r < 0 || position.y + r > maxRowIndex) { return false }\n\n      // If this part of the shape is over a part of the board that's \"on\", it's not valid.\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      if (getAtIndex(board, index) === 1) { return false; }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Execute a callback for every location on a board, and return the resulting array.\n */\nexport function map(board: Board, callback: (x: number, index: number) => unknown) {\n  return board.fill.map(callback);\n}\n\n/**\n * Determine if a position is at the \"top\" of the screen.\n */\nexport function isAtTop(position: Point.Type) {\n  return position.y === 0;\n}\n\nfunction getBoardIndexFromPosition(board: Board, position: Point.Type) {\n  return position.x + (position.y * board.columns);\n}\n\nfunction clone(board: Board): Board {\n  return {\n    ...board,\n    fill: board.fill.slice(),\n  };\n}\n\nfunction getAtIndex(board: Board, index: number) {\n  return board.fill[index];\n}\n\nfunction setAtIndex(board: Board, index: number, value: number): void {\n  board.fill[index] = value;\n}\n\nfunction removeCompletedRows(board: Board): [Board, number] {\n  let linesRemoved = 0;\n  let nextBoard = board;\n  let isRemoving = false;\n  const numRows = board.length / board.columns;\n\n  for (let r = 0; r < numRows; r++) {\n    for (let c = 0; c < board.columns; c++) {\n      const position = Point.create(c, r);\n      const index = getBoardIndexFromPosition(board, position);\n\n      // If any part of this row is 0, stop and move on to the next row.\n      if (getAtIndex(board, index) === 0) {\n        break;\n      }\n\n      // If this is the last column in the row, the row must be completed.\n      if (c === board.columns - 1) {\n        linesRemoved = linesRemoved + 1;\n\n        // If we haven't created a new board, yet, do so.\n        if (!isRemoving) {\n          isRemoving = true;\n          nextBoard = clone(nextBoard);\n        }\n\n        // Remove the row from the board.\n        const beginningPosition = Point.create(0, r);\n        const beginningIndex = getBoardIndexFromPosition(board, beginningPosition);\n        nextBoard.fill.splice(beginningIndex, board.columns);\n\n        // Add an empty row to the top.\n        const emptyRow = fill(new Array(board.columns), 0, 0);\n        nextBoard.fill.unshift(...emptyRow);\n      }\n    }\n  }\n\n  return [nextBoard, linesRemoved];\n}\n\n/**\n * @see https://tetris.fandom.com/wiki/Scoring\n */\nfunction scoreRows(linesRemoved: number, level: number) {\n  switch (linesRemoved) {\n    case 0:\n      return 0;\n    case 1:\n      return 40 * (level + 1);\n    case 2:\n      return 100 * (level + 1);\n    case 3:\n      return 300 * (level + 1);\n    case 4:\n      return 1200 * (level + 1);\n    default:\n      // Should not be possible to reach this case, as the number of lines removed can only be\n      // between 0 and 4.\n      return 0;\n  }\n}\n","import React, { useMemo } from 'react';\nimport Block from './Block';\nimport * as Board from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board.Type,\n  colors: { [index: string]: string },\n  current: Tetromino,\n  height: number,\n  position: Point,\n  width: number,\n}\n\nexport default function Matrix({\n  board,\n  colors,\n  current,\n  height,\n  position,\n  width,\n}: Props) {\n  const styles = useMemo(() => getStyles(board.columns, height, width), [board.columns, height, width]);\n  const boardWithTetromino = Board.commitTetrominoToBoard(board, current, position, 2);\n\n  return (\n    <div style={styles}>\n      {Board.map(boardWithTetromino, (fill: number, i: number) => {\n        return <Block color={colors[fill]} key={`${i}-${fill}`} />\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns: number, height: number, width: number) {\n  return {\n    borderBottom: '1px solid grey',\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: height,\n    width: width,\n  };\n}\n","import React from 'react';\nimport Matrix from './Matrix';\nimport { Type as Board } from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board,\n  children?: React.ReactNode,\n  current: Tetromino,\n  position: Point,\n}\n\nexport default function MainBoard({ board, children, current, position }: Props) {\n  return (\n    <div style={styles.container}>\n      <Matrix\n        board={board}\n        colors={colors}\n        current={current}\n        height={400}\n        position={position}\n        width={200}\n      />\n      {children}\n    </div>\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'limegreen',\n};\n\nconst styles = {\n  container: {\n    position: 'relative' as const,\n  },\n};\n","import React from 'react';\nimport Matrix from './Matrix';\nimport * as Board from '../utils/board';\nimport * as Point from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\nconst board = Board.create(5, 5);\nconst position = Point.create(1, 1);\n\ntype Props = {\n  next: Tetromino,\n}\n\nexport default function Preview({ next }: Props) {\n  return (\n    <Matrix\n      board={board}\n      colors={colors}\n      current={next}\n      height={100}\n      position={position}\n      width={100}\n    />\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'yellow',\n};\n","import React from 'react';\nimport Preview from './Preview';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  children?: React.ReactNode,\n  level: number,\n  next: Tetromino,\n  score: number,\n}\n\nexport default function ScoreBoard({ children, level, next, score }: Props) {\n  return (\n    <div>\n      <Preview next={next} />\n      <div>Level: {level}</div>\n      <div>Score: {score}</div>\n      <div>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n\nexport default function useKeyHandler(key: string, handler: (event: KeyboardEvent) => void) {\n  useEffect(() => {\n    function handleKeyDown(event: KeyboardEvent) {\n      if (event.key === key) {\n        handler(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [key, handler]);\n}\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport { ActionTypes, State } from '../reducer';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: State,\n}\n\nexport default function Lost({ dispatch, state }: Props) {\n  const dispatchReset = useCallback(() => dispatch(ActionTypes.Reset), [dispatch]);\n  useKeyHandler(' ', dispatchReset);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position}>\n        <span style={styles.text}>You lost!</span>\n      </MainBoard>\n      <ScoreBoard level={state.level} next={state.next} score={state.score}>\n        <button onClick={dispatchReset}>Reset</button>\n      </ScoreBoard>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n  text: {\n    backgroundColor: 'whitesmoke',\n    color: 'black',\n    display: 'block',\n    position: 'absolute' as const,\n    textAlign: 'center' as const,\n    top: '50%',\n    width: '100%',\n  },\n};\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport useInterval from '../hooks/useInterval';\nimport { ActionTypes, State } from '../reducer';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: State,\n}\n\nexport default function Playing({ dispatch, state }: Props) {\n  const dispatchRotate = useCallback(() => dispatch(ActionTypes.Rotate), [dispatch]);\n  const dispatchDown = useCallback(() => dispatch(ActionTypes.MoveDown), [dispatch]);\n  const dispatchLeft = useCallback(() => dispatch(ActionTypes.MoveLeft), [dispatch]);\n  const dispatchRight = useCallback(() => dispatch(ActionTypes.MoveRight), [dispatch]);\n  const dispatchTick = useCallback(() => dispatch(ActionTypes.Tick), [dispatch]);\n\n  useKeyHandler('ArrowUp', dispatchRotate);\n  useKeyHandler('ArrowDown', dispatchDown);\n  useKeyHandler('ArrowLeft', dispatchLeft);\n  useKeyHandler('ArrowRight', dispatchRight);\n  useInterval(intervalFromLevel(state.level), dispatchTick);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position} />\n      <ScoreBoard level={state.level} next={state.next} score={state.score} />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n};\n\nfunction intervalFromLevel(level: number) {\n  switch (level) {\n    case 0: return 750;\n    case 1: return 650;\n    case 2: return 550;\n    case 3: return 450;\n    case 4: return 350;\n    case 5: return 250;\n    default: return 150;\n  }\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(delay: number, callback: () => void) {\n  const savedCallback = useRef<Function>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay, callback]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n","import React, { useReducer } from 'react';\nimport Lost from './Lost';\nimport Playing from './Playing';\nimport reducer, { initialState, StateTypes } from '../reducer';\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  switch (state.state) {\n    case StateTypes.Lost:\n      return <Lost dispatch={dispatch} state={state} />;\n    case StateTypes.Playing:\n      return <Playing dispatch={dispatch} state={state} />\n    default:\n      return null;\n  }\n}\n"],"sourceRoot":""}