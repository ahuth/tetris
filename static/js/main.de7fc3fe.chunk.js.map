{"version":3,"sources":["components/Block.tsx","utils/point.ts","utils/tetromino.ts","reducer.ts","utils/randomizer.ts","utils/board.ts","components/Matrix.tsx","components/MainBoard.tsx","components/Preview.tsx","components/ScoreBoard.tsx","hooks/useKeyHandler.ts","components/Lost.tsx","components/Playing.tsx","hooks/useInterval.ts","index.ts","components/App.tsx"],"names":["Block","_ref","color","styling","useMemo","backgroundColor","getStyling","react_default","a","createElement","style","create","x","y","ShapeType","ShapeOrientation","type","orientation","Up","getShape","tetromino","shapes","StateTypes","ActionTypes","_shapes","Object","defineProperty","L","_ShapeType$L","Right","Down","Left","I","_ShapeType$I","T","_ShapeType$T","S","_ShapeType$S","Z","_ShapeType$Z","O","_ShapeType$O","J","_ShapeType$J","shuffle","keys","next","randomizer","_randomizer","toArray","head","tail","slice","length","createInitialState","_Randomizer$next","Randomizer","_Randomizer$next2","slicedToArray","firstShape","_Randomizer$next3","_Randomizer$next4","secondShape","board","Board","current","Tetromino","interval","level","position","Point","score","state","Playing","initialState","reducer","action","Tick","MoveDown","_Board$moveDown","potentialPosition","isValid","isAtTop","Lost","nextBoard","commitTetrominoToBoard","nextShape","nextRandomizer","nextNext","nextPosition","_Board$moveDown2","nextState","objectSpread","MoveLeft","MoveRight","Reset","Rotate","Start","height","width","filled","fill","Array","columns","value","shape","mappedBoard","clone","r","c","setAtIndex","getBoardIndexFromPosition","moveLeft","moveRight","rotate","potentialTetromino","n","maxColIndex","maxRowIndex","getAtIndex","index","Matrix","colors","styles","borderBottom","display","gridTemplateColumns","concat","getStyles","boardWithTetromino","callback","map","i","key","MainBoard","children","container","0","1","2","Preview","ScoreBoard","useKeyHandler","handler","useEffect","handleKeyDown","event","document","addEventListener","removeEventListener","dispatch","dispatchReset","useCallback","text","onClick","textAlign","top","dispatchRotate","dispatchDown","dispatchLeft","dispatchRight","dispatchTick","delay","savedCallback","useRef","id","setInterval","clearInterval","useInterval","ReactDOM","render","React","_useReducer","useReducer","_useReducer2","getElementById"],"mappings":"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","file":"static/js/main.de7fc3fe.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\n\ntype Props = {\n  color: string,\n}\n\nexport default function Block({ color }: Props) {\n  const styling = useMemo(() => getStyling(color), [color]);\n\n  return <div style={styling} />;\n}\n\nfunction getStyling(color: string) {\n  return {\n    backgroundColor: color,\n  };\n}\n","export type Type = Point;\n\ninterface Point {\n  x: number;\n  y: number;\n}\n\nexport function create(x: number, y: number): Point {\n  return { x, y };\n}\n","export type Type = Tetromino;\n\nexport enum ShapeType {\n  L = 'L',\n  I = 'I',\n  T = 'T',\n  S = 'S',\n  Z = 'Z',\n  O = 'O',\n  J = 'J',\n}\n\nexport enum ShapeOrientation {\n  Up,\n  Right,\n  Down,\n  Left,\n}\n\ninterface Tetromino {\n  type: ShapeType;\n  orientation: ShapeOrientation;\n}\n\n/**\n * Create a new Tetromino.\n */\nexport function create(type: ShapeType): Tetromino {\n  return {\n    type,\n    orientation: ShapeOrientation.Up,\n  };\n}\n\n/**\n * Get the current blocks for a piece and orientation.\n */\nexport function getShape(tetromino: Tetromino) {\n  return shapes[tetromino.type][tetromino.orientation];\n}\n\n/**\n * Rotate a Tetromino clockwise.\n */\nexport function rotate(tetromino: Tetromino): Tetromino {\n  return {\n    ...tetromino,\n    orientation: nextOrientation(tetromino.orientation),\n  };\n}\n\nfunction nextOrientation(n: number) {\n  return (n + 1) % 4;\n}\n\nconst shapes = {\n  [ShapeType.L]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.I]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  },\n\n  [ShapeType.T]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.S]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.Z]: {\n    [ShapeOrientation.Up]: [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  },\n\n  [ShapeType.O]: {\n    [ShapeOrientation.Up]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Right]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1],\n      [1, 1],\n    ],\n  },\n\n  [ShapeType.J]: {\n    [ShapeOrientation.Up]: [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  },\n};\n","import * as Board from './utils/board';\nimport * as Point from './utils/point';\nimport * as Randomizer from './utils/randomizer';\nimport * as Tetromino from './utils/tetromino';\n\nexport enum StateTypes {\n  Playing,\n  Won,\n  Lost,\n};\n\nexport enum ActionTypes {\n  MoveDown = 'down',\n  MoveLeft = 'left',\n  MoveRight = 'right',\n  Reset = 'reset',\n  Rotate = 'rotate',\n  Start = 'start',\n  Stop = 'stop',\n  Tick = 'tick',\n};\n\nfunction createInitialState() {\n  const [firstShape, firstRandomizer] = Randomizer.next(Randomizer.create());\n  const [secondShape, randomizer] = Randomizer.next(firstRandomizer);\n\n  return {\n    board: Board.create(20, 10),\n    current: Tetromino.create(firstShape),\n    interval: 750,\n    level: 1,\n    next: Tetromino.create(secondShape),\n    position: Point.create(3, 0),\n    randomizer: randomizer,\n    score: 0,\n    state: StateTypes.Playing,\n  };\n}\n\nexport const initialState = createInitialState();\n\nexport type State = typeof initialState;\n\nexport default function reducer(state: State, action: ActionTypes) {\n  switch (action) {\n    case ActionTypes.Tick:\n    case ActionTypes.MoveDown: {\n      const [board, current, next, position, randomizer, nextState] = Board.moveDown(\n        state.board,\n        state.current,\n        state.next,\n        state.position,\n        state.randomizer,\n        state.state,\n      );\n\n      return {\n        ...state,\n        board,\n        current,\n        next,\n        position,\n        state: nextState,\n        randomizer,\n      };\n     }\n    case ActionTypes.MoveLeft:\n      return {\n        ...state,\n        position: Board.moveLeft(state.board, state.current, state.position),\n      };\n    case ActionTypes.MoveRight:\n      return {\n        ...state,\n        position: Board.moveRight(state.board, state.current, state.position),\n      };\n    case ActionTypes.Reset:\n      return createInitialState();\n    case ActionTypes.Rotate:\n      return {\n        ...state,\n        current: Board.rotate(state.board, state.current, state.position),\n      };\n    case ActionTypes.Start:\n      return {\n        ...state,\n        state: StateTypes.Playing,\n      };\n    default:\n      return state;\n  }\n}\n","import { shuffle } from 'lodash';\nimport { ShapeType } from './tetromino';\n\nexport type Type = Randomizer;\n\ntype Randomizer = ShapeType[];\n\n/**\n * Create a new randomizer object, which s passed in to the other methods in this module to get\n * random numbers.\n * @see http://tetris.wikia.com/wiki/Random_Generator.\n */\nexport function create(): Randomizer {\n  return shuffle(Object.keys(ShapeType) as ShapeType[]);\n}\n\n/**\n * Retrieve the next shape. Returns an array with a value and the next randomizer.\n *\n * Example:\n *\n *   [val, randomizer] = next(randomizer);\n *\n */\nexport function next(randomizer: Randomizer): [ShapeType, Randomizer] {\n  const [head, ...tail] = randomizer;\n\n  if (tail.length > 0) {\n    return [head, tail];\n  }\n\n  return [head, create()];\n}\n","import { fill } from 'lodash';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\nimport { StateTypes } from '../reducer';\n\nexport type Type = Board;\n\ninterface Board {\n  columns: number;\n  fill: number[];\n  length: number;\n}\n\n/**\n * Create a new board.\n */\nexport function create(height: number, width: number): Board {\n  const filled = fill(new Array(height * width), 0, 0);\n\n  return {\n    columns: width,\n    fill: filled,\n    length: filled.length,\n  };\n}\n\n/**\n * Add a tetromino to a board.\n */\nexport function commitTetrominoToBoard(\n  board: Board,\n  tetromino: Tetromino.Type,\n  position: Point.Type,\n  value: number,\n): Board {\n  const shape = Tetromino.getShape(tetromino);\n  const mappedBoard = clone(board);\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      setAtIndex(mappedBoard, index, value);\n    }\n  }\n\n  return mappedBoard;\n}\n\n/**\n * Move a tetromino down, if possible. If not possible, add the tetromino to the board and create a\n * new tetromino.\n */\nexport function moveDown(\n  board: Board,\n  current: Tetromino.Type,\n  next: Tetromino.Type,\n  position: Point.Type,\n  randomizer: Randomizer.Type,\n  state: StateTypes,\n): [Board, Tetromino.Type, Tetromino.Type, Point.Type, Randomizer.Type, StateTypes] {\n  const potentialPosition = Point.create(position.x, position.y + 1);\n\n  if (isValid(board, current, potentialPosition)) {\n    return [board, current, next, potentialPosition, randomizer, state];\n  }\n\n  if (isAtTop(position)) {\n    return [board, current, next, position, randomizer, StateTypes.Lost];\n  }\n\n  const nextBoard = commitTetrominoToBoard(board, current, position, 1);\n  const [nextShape, nextRandomizer] = Randomizer.next(randomizer);\n  const nextNext = Tetromino.create(nextShape);\n  const nextPosition = Point.create(3, 0);\n\n  return [nextBoard, next, nextNext, nextPosition, nextRandomizer, state];\n}\n\n/**\n * Move a tetromino left, if possible. Either way, return a position.\n */\nexport function moveLeft(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x - 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Move a tetromino right, if possible. Either way, return a position.\n */\nexport function moveRight(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialPosition = Point.create(position.x + 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n/**\n * Rotate a tetromino, if possible. Either way, return a tetromino.\n */\nexport function rotate(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const potentialTetromino = Tetromino.rotate(tetromino);\n\n  if (isValid(board, potentialTetromino, position)) {\n    return potentialTetromino;\n  }\n\n  return tetromino;\n}\n\n/**\n * Determine if a tetromino at a certain position on the board is \"valid\". In other words, doesn't\n * overlap with any existing filled spots and is completely on the board.\n */\nfunction isValid(board: Board, tetromino: Tetromino.Type, position: Point.Type) {\n  const shape = Tetromino.getShape(tetromino);\n  const maxColIndex = board.columns - 1;\n  const maxRowIndex = (board.length / board.columns) - 1;\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      // If the horizontal position is off the board, it's not valid.\n      if (position.x + c < 0 || position.x + c > maxColIndex) { return false; }\n\n      // If the vertical position is off the board, it's not valid.\n      if (position.y + r < 0 || position.y + r > maxRowIndex) { return false }\n\n      // If this part of the shape is over a part of the board that's \"on\", it's not valid.\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      if (getAtIndex(board, index) === 1) { return false; }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Execute a callback for every location on a board, and return the resulting array.\n */\nexport function map(board: Board, callback: (x: number, index: number) => unknown) {\n  return board.fill.map(callback);\n}\n\n/**\n * Determine if a position is at the \"top\" of the screen.\n */\nexport function isAtTop(position: Point.Type) {\n  return position.y === 0;\n}\n\nfunction getBoardIndexFromPosition(board: Board, position: Point.Type) {\n  return position.x + (position.y * board.columns);\n}\n\nfunction clone(board: Board): Board {\n  return {\n    ...board,\n    fill: board.fill.slice(),\n  };\n}\n\nfunction getAtIndex(board: Board, index: number) {\n  return board.fill[index];\n}\n\nfunction setAtIndex(board: Board, index: number, value: number): void {\n  board.fill[index] = value;\n}\n","import React, { useMemo } from 'react';\nimport Block from './Block';\nimport * as Board from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board.Type,\n  colors: { [index: string]: string },\n  current: Tetromino,\n  height: number,\n  position: Point,\n  width: number,\n}\n\nexport default function Matrix({\n  board,\n  colors,\n  current,\n  height,\n  position,\n  width,\n}: Props) {\n  const styles = useMemo(() => getStyles(board.columns, height, width), [board.columns, height, width]);\n  const boardWithTetromino = Board.commitTetrominoToBoard(board, current, position, 2);\n\n  return (\n    <div style={styles}>\n      {Board.map(boardWithTetromino, (fill: number, i: number) => {\n        return <Block color={colors[fill]} key={`${i}-${fill}`} />\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns: number, height: number, width: number) {\n  return {\n    borderBottom: '1px solid grey',\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: height,\n    width: width,\n  };\n}\n","import React from 'react';\nimport Matrix from './Matrix';\nimport { Type as Board } from '../utils/board';\nimport { Type as Point } from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  board: Board,\n  children?: React.ReactNode,\n  current: Tetromino,\n  position: Point,\n}\n\nexport default function MainBoard({ board, children, current, position }: Props) {\n  return (\n    <div style={styles.container}>\n      <Matrix\n        board={board}\n        colors={colors}\n        current={current}\n        height={400}\n        position={position}\n        width={200}\n      />\n      {children}\n    </div>\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'limegreen',\n};\n\nconst styles = {\n  container: {\n    position: 'relative' as const,\n  },\n};\n","import React from 'react';\nimport Matrix from './Matrix';\nimport * as Board from '../utils/board';\nimport * as Point from '../utils/point';\nimport { Type as Tetromino } from '../utils/tetromino';\n\nconst board = Board.create(5, 5);\nconst position = Point.create(1, 1);\n\ntype Props = {\n  next: Tetromino,\n}\n\nexport default function Preview({ next }: Props) {\n  return (\n    <Matrix\n      board={board}\n      colors={colors}\n      current={next}\n      height={100}\n      position={position}\n      width={100}\n    />\n  );\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'yellow',\n};\n","import React from 'react';\nimport Preview from './Preview';\nimport { Type as Tetromino } from '../utils/tetromino';\n\ntype Props = {\n  children?: React.ReactNode,\n  level: number,\n  next: Tetromino,\n  score: number,\n}\n\nexport default function ScoreBoard({ children, level, next, score }: Props) {\n  return (\n    <div>\n      <Preview next={next} />\n      <div>Level: {level}</div>\n      <div>Score: {score}</div>\n      <div>\n        {children}\n      </div>\n    </div>\n  );\n}\n","import { useEffect } from 'react';\n\nexport default function useKeyHandler(key: string, handler: (event: KeyboardEvent) => void) {\n  useEffect(() => {\n    function handleKeyDown(event: KeyboardEvent) {\n      if (event.key === key) {\n        handler(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [key, handler]);\n}\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport { ActionTypes, State } from '../reducer';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: State,\n}\n\nexport default function Lost({ dispatch, state }: Props) {\n  const dispatchReset = useCallback(() => dispatch(ActionTypes.Reset), [dispatch]);\n  useKeyHandler(' ', dispatchReset);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position}>\n        <span style={styles.text}>You lost!</span>\n      </MainBoard>\n      <ScoreBoard level={state.level} next={state.next} score={state.score}>\n        <button onClick={dispatchReset}>Reset</button>\n      </ScoreBoard>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n  text: {\n    backgroundColor: 'whitesmoke',\n    color: 'black',\n    display: 'block',\n    position: 'absolute' as const,\n    textAlign: 'center' as const,\n    top: '50%',\n    width: '100%',\n  },\n};\n","import React, { useCallback } from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport useInterval from '../hooks/useInterval';\nimport { ActionTypes, State } from '../reducer';\n\ntype Props = {\n  dispatch: React.Dispatch<ActionTypes>,\n  state: State,\n}\n\nexport default function Playing({ dispatch, state }: Props) {\n  const dispatchRotate = useCallback(() => dispatch(ActionTypes.Rotate), [dispatch]);\n  const dispatchDown = useCallback(() => dispatch(ActionTypes.MoveDown), [dispatch]);\n  const dispatchLeft = useCallback(() => dispatch(ActionTypes.MoveLeft), [dispatch]);\n  const dispatchRight = useCallback(() => dispatch(ActionTypes.MoveRight), [dispatch]);\n  const dispatchTick = useCallback(() => dispatch(ActionTypes.Tick), [dispatch]);\n\n  useKeyHandler('ArrowUp', dispatchRotate);\n  useKeyHandler('ArrowDown', dispatchDown);\n  useKeyHandler('ArrowLeft', dispatchLeft);\n  useKeyHandler('ArrowRight', dispatchRight);\n  useInterval(state.interval, dispatchTick);\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position} />\n      <ScoreBoard level={state.level} next={state.next} score={state.score} />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n};\n","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(delay: number, callback: () => void) {\n  const savedCallback = useRef<Function>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n\n    let id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay, callback]);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n","import React, { useReducer } from 'react';\nimport Lost from './Lost';\nimport Playing from './Playing';\nimport reducer, { initialState, StateTypes } from '../reducer';\n\nexport default function App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  switch (state.state) {\n    case StateTypes.Lost:\n      return <Lost dispatch={dispatch} state={state} />;\n    case StateTypes.Playing:\n      return <Playing dispatch={dispatch} state={state} />\n    default:\n      return null;\n  }\n}\n"],"sourceRoot":""}