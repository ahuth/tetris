{"version":3,"sources":["components/Block.jsx","utils/point.js","utils/tetromino.js","utils/randomizer.js","utils/board.js","components/Matrix.jsx","components/MainBoard.jsx","components/Preview.jsx","components/ScoreBoard.jsx","hooks/useKeyHandler.js","reducer.js","components/App.jsx","index.js","hooks/useInterval.js"],"names":["Block","_ref","color","styling","React","useMemo","backgroundColor","getStyling","react_default","a","createElement","style","create","x","y","ShapeType","L","I","T","S","Z","O","J","ShapeOrientation","Up","Right","Down","Left","type","orientation","getShape","tetromino","shapes","_shapes","Object","defineProperty","_ShapeType$L","_ShapeType$I","_ShapeType$T","_ShapeType$S","_ShapeType$Z","_ShapeType$O","_ShapeType$J","shuffle","keys","next","randomizer","_randomizer","toArray","head","tail","slice","length","height","width","filled","fill","Array","columns","commitTetrominoToBoard","board","position","value","shape","Tetromino","mappedBoard","objectSpread","clone","r","c","setAtIndex","getBoardIndexFromPosition","Point","moveLeft","potentialPosition","isValid","moveRight","rotate","potentialTetromino","n","maxColIndex","maxRowIndex","getAtIndex","index","Matrix","current","styles","borderBottom","display","gridTemplateColumns","concat","getStyles","boardWithTetromino","Board","callback","map","i","colors","key","0","1","2","MainBoard","Preview","ScoreBoard","level","score","useKeyHandler","handler","useEffect","handleKeyDown","event","document","addEventListener","removeEventListener","Randomizer","firstShape","secondShape","ActionTypes","MoveDown","MoveLeft","MoveRight","Reset","Rotate","Start","Stop","Tick","initialState","interval","state","reducer","action","_Board$moveDown","nextBoard","_Randomizer$next","_Randomizer$next2","slicedToArray","nextShape","nextRandomizer","_Board$moveDown2","container","ReactDOM","render","_React$useReducer","useReducer","_React$useReducer2","dispatch","delay","savedCallback","useRef","id","setInterval","clearInterval","useInterval","getElementById"],"mappings":"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","file":"static/js/main.e0cb1d8c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Block({ color }) {\n  const styling = React.useMemo(() => getStyling(color), [color]);\n\n  return <div style={styling} />;\n}\n\nfunction getStyling(color) {\n  return {\n    backgroundColor: color,\n  };\n}\n","export function create(x, y) {\n  return { x, y };\n}\n\nexport function equals(a, b) {\n  return a.x === b.x && a.y === b.y;\n}\n","export const ShapeType = {\n  L: 'L',\n  I: 'I',\n  T: 'T',\n  S: 'S',\n  Z: 'Z',\n  O: 'O',\n  J: 'J',\n}\n\nexport const ShapeOrientation = {\n  Up: 0,\n  Right: 1,\n  Down: 2,\n  Left: 3,\n}\n\n// Create a new Tetromino.\nexport function create(type) {\n  return {\n    type,\n    orientation: ShapeOrientation.Up,\n  };\n}\n\n// Get the current blocks for a piece and orientation.\nexport function getShape(tetromino) {\n  return shapes[tetromino.type][tetromino.orientation];\n}\n\n// Rotate a Tetromino clockwise.\nexport function rotate(tetromino) {\n  return {\n    ...tetromino,\n    orientation: nextOrientation(tetromino.orientation),\n  };\n}\n\nfunction nextOrientation(n) {\n  return (n + 1) % 4;\n}\n\nconst shapes = {\n  [ShapeType.L]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 1],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.I]: {\n    [ShapeOrientation.Up]: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  },\n\n  [ShapeType.T]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.S]: {\n    [ShapeOrientation.Up]: [\n      [0, 1, 1],\n      [1, 1, 0],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  },\n\n  [ShapeType.Z]: {\n    [ShapeOrientation.Up]: [\n      [1, 1, 0],\n      [0, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  },\n\n  [ShapeType.O]: {\n    [ShapeOrientation.Up]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Right]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Down]: [\n      [1, 1],\n      [1, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [1, 1],\n      [1, 1],\n    ],\n  },\n\n  [ShapeType.J]: {\n    [ShapeOrientation.Up]: [\n      [1, 0, 0],\n      [1, 1, 1],\n      [0, 0, 0],\n    ],\n    [ShapeOrientation.Right]: [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [ShapeOrientation.Down]: [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [ShapeOrientation.Left]: [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  },\n};\n","import { shuffle } from 'lodash';\nimport { ShapeType } from './tetromino';\n\n// Create a new randomizer object, which s passed in to the other methods in this module to get\n// random numbers. See http://tetris.wikia.com/wiki/Random_Generator.\nexport function create() {\n  return shuffle(Object.keys(ShapeType));\n}\n\n// Retrieve the next number. Returns an array with value and the next randomizer.\n//\n// Example:\n//\n//   [val, randomizer] = next(randomizer);\n//\nexport function next(randomizer) {\n  const [head, ...tail] = randomizer;\n\n  if (tail.length > 0) {\n    return [head, tail];\n  }\n\n  return [head, create()];\n}\n","import { fill } from 'lodash';\nimport * as Point from './point';\nimport * as Randomizer from './randomizer';\nimport * as Tetromino from './tetromino';\n\n// Create a new board.\nexport function create(height, width) {\n  const filled = fill(new Array(height * width), 0, 0);\n\n  return {\n    columns: width,\n    fill: filled,\n    length: filled.length,\n  };\n}\n\n// Add a tetromino to a board.\nexport function commitTetrominoToBoard(board, tetromino, position, value) {\n  const shape = Tetromino.getShape(tetromino);\n  const mappedBoard = clone(board);\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      setAtIndex(mappedBoard, index, value);\n    }\n  }\n\n  return mappedBoard;\n}\n\n// Move a tetromino down, if possible. If not possible, add the tetromino to the board and create a\n// new tetromino.\nexport function moveDown(board, current, next, position, randomizer) {\n  const potentialPosition = Point.create(position.x, position.y + 1);\n\n  if (isValid(board, current, potentialPosition)) {\n    return [board, current, next, potentialPosition, randomizer];\n  }\n\n  const nextBoard = commitTetrominoToBoard(board, current, position, 1);\n  const [nextShape, nextRandomizer] = Randomizer.next(randomizer);\n  const nextNext = Tetromino.create(nextShape);\n  const nextPosition = Point.create(3, 0);\n\n  return [nextBoard, next, nextNext, nextPosition, nextRandomizer];\n}\n\n// Move a tetromino left, if possible. Either way, return a position.\nexport function moveLeft(board, tetromino, position) {\n  const potentialPosition = Point.create(position.x - 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n// Move a tetromino right, if possible. Either way, return a position.\nexport function moveRight(board, tetromino, position) {\n  const potentialPosition = Point.create(position.x + 1, position.y);\n\n  if (isValid(board, tetromino, potentialPosition)) {\n    return potentialPosition;\n  }\n\n  return position;\n}\n\n// Rotate a tetromino, if possible. Either way, return a tetromino.\nexport function rotate(board, tetromino, position) {\n  const potentialTetromino = Tetromino.rotate(tetromino);\n\n  if (isValid(board, potentialTetromino, position)) {\n    return potentialTetromino;\n  }\n\n  return tetromino;\n}\n\n// Determine if a tetromino at a certain position on the board is \"valid\". In other words, doesn't\n// overlap with any existing filled spots and is completely on the board.\nfunction isValid(board, tetromino, position) {\n  const shape = Tetromino.getShape(tetromino);\n  const maxColIndex = board.columns - 1;\n  const maxRowIndex = (board.length / board.columns) - 1;\n\n  for (let r = 0; r < shape.length; r++) {\n    for (let c = 0; c < shape[r].length; c++) {\n      // If this part of the shape is \"off\", don't worry about it.\n      if (shape[r][c] === 0) { continue; }\n\n      // If the horizontal position is off the board, it's not valid.\n      if (position.x + c < 0 || position.x + c > maxColIndex) { return false; }\n\n      // If the vertical position is off the board, it's not valid.\n      if (position.y + r < 0 || position.y + r > maxRowIndex) { return false }\n\n      // If this part of the shape is over a part of the board that's \"on\", it's not valid.\n      const index = getBoardIndexFromPosition(board, Point.create(position.x + c, position.y + r));\n      if (getAtIndex(board, index) === 1) { return false; }\n    }\n  }\n\n  return true;\n}\n\n// Execute a callback for every location on a board, and return the resulting array.\nexport function map(board, callback) {\n  return board.fill.map(callback);\n}\n\nfunction getBoardIndexFromPosition(board, position) {\n  return position.x + (position.y * board.columns);\n}\n\nfunction clone(board) {\n  return {\n    ...board,\n    fill: board.fill.slice(),\n  };\n}\n\nfunction getAtIndex(board, index) {\n  return board.fill[index];\n}\n\nfunction setAtIndex(board, index, value) {\n  board.fill[index] = value;\n}\n","import React from 'react';\nimport Block from './Block';\nimport * as Board from '../utils/board';\n\nexport default function Matrix({ board, current, height, position, width }) {\n  const styles = React.useMemo(() => getStyles(board.columns, height, width), [board.columns, height, width]);\n  const boardWithTetromino = Board.commitTetrominoToBoard(board, current, position, 2);\n\n  return (\n    <div style={styles}>\n      {Board.map(boardWithTetromino, (fill, i) => {\n        return <Block color={colors[fill]} key={`${i}-${fill}`} />\n      })}\n    </div>\n  );\n}\n\nfunction getStyles(columns, height, width) {\n  return {\n    borderBottom: '1px solid grey',\n    display: 'grid',\n    gridTemplateColumns: `repeat(${columns}, 1fr)`,\n    height: height,\n    width: width,\n  };\n}\n\nconst colors = {\n  0: 'black',\n  1: 'dodgerblue',\n  2: 'limegreen',\n};\n","import React from 'react';\nimport Matrix from './Matrix';\n\nexport default function MainBoard({ board, current, position }) {\n  return (\n    <Matrix\n      board={board}\n      current={current}\n      height={400}\n      position={position}\n      width={200}\n    />\n  );\n}\n","import React from 'react';\nimport Matrix from './Matrix';\nimport * as Board from '../utils/board';\nimport * as Point from '../utils/point';\n\nconst board = Board.create(5, 5);\nconst position = Point.create(1, 1);\n\nexport default function Preview({ next }) {\n  return (\n    <Matrix\n      board={board}\n      current={next}\n      height={100}\n      position={position}\n      width={100}\n    />\n  );\n}\n","import React from 'react';\nimport Preview from './Preview';\n\nexport default function ScoreBoard({ level, next, score }) {\n  return (\n    <div>\n      <Preview next={next} />\n      <div>Level: {level}</div>\n      <div>Score: {score}</div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function useKeyHandler(key, handler) {\n  React.useEffect(() => {\n    function handleKeyDown(event) {\n      if (event.key === key) {\n        handler(event);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [key]);\n}\n","import * as Board from './utils/board';\nimport * as Point from './utils/point';\nimport * as Randomizer from './utils/randomizer';\nimport * as Tetromino from './utils/tetromino';\n\nconst [firstShape, firstRandomizer] = Randomizer.next(Randomizer.create());\nconst [secondShape, randomizer] = Randomizer.next(firstRandomizer);\n\nexport const StateTypes = {\n  Paused: 0,\n  Playing: 1,\n  Won: 2,\n  Lost: 3,\n};\n\nexport const ActionTypes = {\n  MoveDown: 'down',\n  MoveLeft: 'left',\n  MoveRight: 'right',\n  Reset: 'reset',\n  Rotate: 'rotate',\n  Start: 'start',\n  Stop: 'stop',\n  Tick: 'tick',\n};\n\nexport const initialState = {\n  board: Board.create(20, 10),\n  current: Tetromino.create(firstShape),\n  interval: 750,\n  level: 1,\n  next: Tetromino.create(secondShape),\n  position: Point.create(3, 0),\n  randomizer: randomizer,\n  score: 0,\n  state: StateTypes.Paused,\n}\n\nexport default function reducer(state, action) {\n  switch (action) {\n    case ActionTypes.Tick:\n    case ActionTypes.MoveDown: {\n      const [board, current, next, position, randomizer] = Board.moveDown(\n        state.board,\n        state.current,\n        state.next,\n        state.position,\n        state.randomizer,\n      );\n\n      return {\n        ...state,\n        board,\n        current,\n        next,\n        position,\n        randomizer,\n      };\n     }\n    case ActionTypes.MoveLeft:\n      return {\n        ...state,\n        position: Board.moveLeft(state.board, state.current, state.position),\n      };\n    case ActionTypes.MoveRight:\n      return {\n        ...state,\n        position: Board.moveRight(state.board, state.current, state.position),\n      };\n    case ActionTypes.Rotate:\n      return {\n        ...state,\n        current: Board.rotate(state.board, state.current, state.position),\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport MainBoard from './MainBoard';\nimport ScoreBoard from './ScoreBoard';\nimport useKeyHandler from '../hooks/useKeyHandler';\nimport useInterval from '../hooks/useInterval';\nimport reducer, { initialState, ActionTypes } from '../reducer';\n\nexport default function App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  useKeyHandler('ArrowUp', () => dispatch(ActionTypes.Rotate));\n  useKeyHandler('ArrowDown', () => dispatch(ActionTypes.MoveDown));\n  useKeyHandler('ArrowLeft', () => dispatch(ActionTypes.MoveLeft));\n  useKeyHandler('ArrowRight', () => dispatch(ActionTypes.MoveRight));\n\n  useInterval(state.interval, () => dispatch(ActionTypes.Tick));\n\n  return (\n    <div style={styles.container}>\n      <MainBoard board={state.board} current={state.current} position={state.position} />\n      <ScoreBoard level={state.level} next={state.next} score={state.score} />\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n  },\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n","import React from 'react';\n\nexport default function useInterval(delay, callback) {\n  const savedCallback = React.useRef();\n\n  React.useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  React.useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay != null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n"],"sourceRoot":""}